
TIMER_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b48  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800060  00800060  00000bbc  2**0
                  ALLOC
  2 .stab         00000fcc  00000000  00000000  00000bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b15  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <__vector_10>
  2c:	0c 94 13 04 	jmp	0x826	; 0x826 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 2c 05 	call	0xa58	; 0xa58 <main>
  74:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <MDIO_voidInit>:
#include"../include/MCAL/DIO/DIO_interface.h"
#include"../include/MCAL/DIO/DIO_private.h"
#include"../include/MCAL/DIO/DIO_configuration.h"

void MDIO_voidInit (void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	DDRA_REG = CONC_BIT(PORTA_PIN7_DIRECTION, PORTA_PIN6_DIRECTION, PORTA_PIN5_DIRECTION, PORTA_PIN4_DIRECTION,
  84:	ea e3       	ldi	r30, 0x3A	; 58
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	8d ef       	ldi	r24, 0xFD	; 253
  8a:	80 83       	st	Z, r24
						PORTA_PIN3_DIRECTION, PORTA_PIN2_DIRECTION, PORTA_PIN1_DIRECTION, PORTA_PIN0_DIRECTION);

	DDRB_REG = CONC_BIT(PORTB_PIN7_DIRECTION, PORTB_PIN6_DIRECTION, PORTB_PIN5_DIRECTION, PORTB_PIN4_DIRECTION,
  8c:	e7 e3       	ldi	r30, 0x37	; 55
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	80 83       	st	Z, r24
						PORTB_PIN3_DIRECTION, PORTB_PIN2_DIRECTION, PORTB_PIN1_DIRECTION, PORTB_PIN0_DIRECTION);

	DDRC_REG = CONC_BIT(PORTC_PIN7_DIRECTION, PORTC_PIN6_DIRECTION, PORTC_PIN5_DIRECTION, PORTC_PIN4_DIRECTION,
  94:	e4 e3       	ldi	r30, 0x34	; 52
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	80 83       	st	Z, r24
						PORTC_PIN3_DIRECTION, PORTC_PIN2_DIRECTION, PORTC_PIN1_DIRECTION, PORTC_PIN0_DIRECTION);

	DDRD_REG = CONC_BIT(PORTD_PIN7_DIRECTION, PORTD_PIN6_DIRECTION, PORTD_PIN5_DIRECTION, PORTD_PIN4_DIRECTION,
  9c:	e1 e3       	ldi	r30, 0x31	; 49
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	80 83       	st	Z, r24
						PORTD_PIN3_DIRECTION, PORTD_PIN2_DIRECTION, PORTD_PIN1_DIRECTION, PORTD_PIN0_DIRECTION);

	PORTA_REG = CONC_BIT(PORTA_PIN7_VALUE, PORTA_PIN6_VALUE, PORTA_PIN5_VALUE, PORTA_PIN4_VALUE,
  a4:	eb e3       	ldi	r30, 0x3B	; 59
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	83 e0       	ldi	r24, 0x03	; 3
  aa:	80 83       	st	Z, r24
						 PORTA_PIN3_VALUE, PORTA_PIN2_VALUE, PORTA_PIN1_VALUE, PORTA_PIN0_VALUE);

	PORTB_REG = CONC_BIT(PORTB_PIN7_VALUE, PORTB_PIN6_VALUE, PORTB_PIN5_VALUE, PORTB_PIN4_VALUE,
  ac:	e8 e3       	ldi	r30, 0x38	; 56
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	10 82       	st	Z, r1
						 PORTB_PIN3_VALUE, PORTB_PIN2_VALUE, PORTB_PIN1_VALUE, PORTB_PIN0_VALUE);

	PORTC_REG = CONC_BIT(PORTC_PIN7_VALUE, PORTC_PIN6_VALUE, PORTC_PIN5_VALUE, PORTC_PIN4_VALUE,
  b2:	e5 e3       	ldi	r30, 0x35	; 53
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
		   				 PORTC_PIN3_VALUE, PORTC_PIN2_VALUE, PORTC_PIN1_VALUE, PORTC_PIN0_VALUE);

	PORTD_REG = CONC_BIT(PORTD_PIN7_VALUE, PORTD_PIN6_VALUE, PORTD_PIN5_VALUE, PORTD_PIN4_VALUE,
  b8:	e2 e3       	ldi	r30, 0x32	; 50
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	10 82       	st	Z, r1
						 PORTD_PIN3_VALUE, PORTD_PIN2_VALUE, PORTD_PIN1_VALUE, PORTD_PIN0_VALUE);

}
  be:	cf 91       	pop	r28
  c0:	df 91       	pop	r29
  c2:	08 95       	ret

000000c4 <MDIO_voidSetPinDirection>:
// PORT ID :- POTRTA - PORTB - PORTC - PORTD
// PIN ID :- PIN0 ... PIN7
// PIN DIRECTION:- PIN_INPUT - PIN_OUTPUT
void MDIO_voidSetPinDirection (u8 A_u8PortId, u8 A_u8PinId, u8 A_u8Direction)
{
  c4:	df 93       	push	r29
  c6:	cf 93       	push	r28
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	2d 97       	sbiw	r28, 0x0d	; 13
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	f8 94       	cli
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	89 83       	std	Y+1, r24	; 0x01
  da:	6a 83       	std	Y+2, r22	; 0x02
  dc:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8PortId)
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	28 2f       	mov	r18, r24
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	3d 87       	std	Y+13, r19	; 0x0d
  e6:	2c 87       	std	Y+12, r18	; 0x0c
  e8:	8c 85       	ldd	r24, Y+12	; 0x0c
  ea:	9d 85       	ldd	r25, Y+13	; 0x0d
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	91 05       	cpc	r25, r1
  f0:	09 f4       	brne	.+2      	; 0xf4 <MDIO_voidSetPinDirection+0x30>
  f2:	4f c0       	rjmp	.+158    	; 0x192 <MDIO_voidSetPinDirection+0xce>
  f4:	2c 85       	ldd	r18, Y+12	; 0x0c
  f6:	3d 85       	ldd	r19, Y+13	; 0x0d
  f8:	22 30       	cpi	r18, 0x02	; 2
  fa:	31 05       	cpc	r19, r1
  fc:	2c f4       	brge	.+10     	; 0x108 <MDIO_voidSetPinDirection+0x44>
  fe:	8c 85       	ldd	r24, Y+12	; 0x0c
 100:	9d 85       	ldd	r25, Y+13	; 0x0d
 102:	00 97       	sbiw	r24, 0x00	; 0
 104:	71 f0       	breq	.+28     	; 0x122 <MDIO_voidSetPinDirection+0x5e>
 106:	eb c0       	rjmp	.+470    	; 0x2de <MDIO_voidSetPinDirection+0x21a>
 108:	2c 85       	ldd	r18, Y+12	; 0x0c
 10a:	3d 85       	ldd	r19, Y+13	; 0x0d
 10c:	22 30       	cpi	r18, 0x02	; 2
 10e:	31 05       	cpc	r19, r1
 110:	09 f4       	brne	.+2      	; 0x114 <MDIO_voidSetPinDirection+0x50>
 112:	77 c0       	rjmp	.+238    	; 0x202 <MDIO_voidSetPinDirection+0x13e>
 114:	8c 85       	ldd	r24, Y+12	; 0x0c
 116:	9d 85       	ldd	r25, Y+13	; 0x0d
 118:	83 30       	cpi	r24, 0x03	; 3
 11a:	91 05       	cpc	r25, r1
 11c:	09 f4       	brne	.+2      	; 0x120 <MDIO_voidSetPinDirection+0x5c>
 11e:	a9 c0       	rjmp	.+338    	; 0x272 <MDIO_voidSetPinDirection+0x1ae>
 120:	de c0       	rjmp	.+444    	; 0x2de <MDIO_voidSetPinDirection+0x21a>
	{
	case PORTA:
		switch(A_u8Direction)
 122:	8b 81       	ldd	r24, Y+3	; 0x03
 124:	28 2f       	mov	r18, r24
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	3b 87       	std	Y+11, r19	; 0x0b
 12a:	2a 87       	std	Y+10, r18	; 0x0a
 12c:	8a 85       	ldd	r24, Y+10	; 0x0a
 12e:	9b 85       	ldd	r25, Y+11	; 0x0b
 130:	00 97       	sbiw	r24, 0x00	; 0
 132:	d1 f0       	breq	.+52     	; 0x168 <MDIO_voidSetPinDirection+0xa4>
 134:	2a 85       	ldd	r18, Y+10	; 0x0a
 136:	3b 85       	ldd	r19, Y+11	; 0x0b
 138:	21 30       	cpi	r18, 0x01	; 1
 13a:	31 05       	cpc	r19, r1
 13c:	09 f0       	breq	.+2      	; 0x140 <MDIO_voidSetPinDirection+0x7c>
 13e:	cf c0       	rjmp	.+414    	; 0x2de <MDIO_voidSetPinDirection+0x21a>
		{
		case PIN_OUTPUT: SET_BIT(DDRA_REG,A_u8PinId);
 140:	aa e3       	ldi	r26, 0x3A	; 58
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	ea e3       	ldi	r30, 0x3A	; 58
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	48 2f       	mov	r20, r24
 14c:	8a 81       	ldd	r24, Y+2	; 0x02
 14e:	28 2f       	mov	r18, r24
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 2e       	mov	r0, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <MDIO_voidSetPinDirection+0x9a>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <MDIO_voidSetPinDirection+0x96>
 162:	84 2b       	or	r24, r20
 164:	8c 93       	st	X, r24
 166:	bb c0       	rjmp	.+374    	; 0x2de <MDIO_voidSetPinDirection+0x21a>
						 break;
		case PIN_INPUT : CLR_BIT(DDRA_REG,A_u8PinId);
 168:	aa e3       	ldi	r26, 0x3A	; 58
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	ea e3       	ldi	r30, 0x3A	; 58
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	48 2f       	mov	r20, r24
 174:	8a 81       	ldd	r24, Y+2	; 0x02
 176:	28 2f       	mov	r18, r24
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 2e       	mov	r0, r18
 180:	02 c0       	rjmp	.+4      	; 0x186 <MDIO_voidSetPinDirection+0xc2>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	0a 94       	dec	r0
 188:	e2 f7       	brpl	.-8      	; 0x182 <MDIO_voidSetPinDirection+0xbe>
 18a:	80 95       	com	r24
 18c:	84 23       	and	r24, r20
 18e:	8c 93       	st	X, r24
 190:	a6 c0       	rjmp	.+332    	; 0x2de <MDIO_voidSetPinDirection+0x21a>
		default:
				 break;
		}
		break;
	case PORTB:
		switch(A_u8Direction)
 192:	8b 81       	ldd	r24, Y+3	; 0x03
 194:	28 2f       	mov	r18, r24
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	39 87       	std	Y+9, r19	; 0x09
 19a:	28 87       	std	Y+8, r18	; 0x08
 19c:	88 85       	ldd	r24, Y+8	; 0x08
 19e:	99 85       	ldd	r25, Y+9	; 0x09
 1a0:	00 97       	sbiw	r24, 0x00	; 0
 1a2:	d1 f0       	breq	.+52     	; 0x1d8 <MDIO_voidSetPinDirection+0x114>
 1a4:	28 85       	ldd	r18, Y+8	; 0x08
 1a6:	39 85       	ldd	r19, Y+9	; 0x09
 1a8:	21 30       	cpi	r18, 0x01	; 1
 1aa:	31 05       	cpc	r19, r1
 1ac:	09 f0       	breq	.+2      	; 0x1b0 <MDIO_voidSetPinDirection+0xec>
 1ae:	97 c0       	rjmp	.+302    	; 0x2de <MDIO_voidSetPinDirection+0x21a>
		{
		case PIN_OUTPUT: SET_BIT(DDRB_REG,A_u8PinId);
 1b0:	a7 e3       	ldi	r26, 0x37	; 55
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	e7 e3       	ldi	r30, 0x37	; 55
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	48 2f       	mov	r20, r24
 1bc:	8a 81       	ldd	r24, Y+2	; 0x02
 1be:	28 2f       	mov	r18, r24
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 2e       	mov	r0, r18
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <MDIO_voidSetPinDirection+0x10a>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	0a 94       	dec	r0
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <MDIO_voidSetPinDirection+0x106>
 1d2:	84 2b       	or	r24, r20
 1d4:	8c 93       	st	X, r24
 1d6:	83 c0       	rjmp	.+262    	; 0x2de <MDIO_voidSetPinDirection+0x21a>
						 break;
		case PIN_INPUT : CLR_BIT(DDRB_REG,A_u8PinId);
 1d8:	a7 e3       	ldi	r26, 0x37	; 55
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	e7 e3       	ldi	r30, 0x37	; 55
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	48 2f       	mov	r20, r24
 1e4:	8a 81       	ldd	r24, Y+2	; 0x02
 1e6:	28 2f       	mov	r18, r24
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 2e       	mov	r0, r18
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <MDIO_voidSetPinDirection+0x132>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	0a 94       	dec	r0
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <MDIO_voidSetPinDirection+0x12e>
 1fa:	80 95       	com	r24
 1fc:	84 23       	and	r24, r20
 1fe:	8c 93       	st	X, r24
 200:	6e c0       	rjmp	.+220    	; 0x2de <MDIO_voidSetPinDirection+0x21a>
		default:
				break;
		}
		break;
	case PORTC:
		switch(A_u8Direction)
 202:	8b 81       	ldd	r24, Y+3	; 0x03
 204:	28 2f       	mov	r18, r24
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	3f 83       	std	Y+7, r19	; 0x07
 20a:	2e 83       	std	Y+6, r18	; 0x06
 20c:	8e 81       	ldd	r24, Y+6	; 0x06
 20e:	9f 81       	ldd	r25, Y+7	; 0x07
 210:	00 97       	sbiw	r24, 0x00	; 0
 212:	d1 f0       	breq	.+52     	; 0x248 <MDIO_voidSetPinDirection+0x184>
 214:	2e 81       	ldd	r18, Y+6	; 0x06
 216:	3f 81       	ldd	r19, Y+7	; 0x07
 218:	21 30       	cpi	r18, 0x01	; 1
 21a:	31 05       	cpc	r19, r1
 21c:	09 f0       	breq	.+2      	; 0x220 <MDIO_voidSetPinDirection+0x15c>
 21e:	5f c0       	rjmp	.+190    	; 0x2de <MDIO_voidSetPinDirection+0x21a>
		{
		case PIN_OUTPUT: SET_BIT(DDRC_REG,A_u8PinId);
 220:	a4 e3       	ldi	r26, 0x34	; 52
 222:	b0 e0       	ldi	r27, 0x00	; 0
 224:	e4 e3       	ldi	r30, 0x34	; 52
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	48 2f       	mov	r20, r24
 22c:	8a 81       	ldd	r24, Y+2	; 0x02
 22e:	28 2f       	mov	r18, r24
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 2e       	mov	r0, r18
 238:	02 c0       	rjmp	.+4      	; 0x23e <MDIO_voidSetPinDirection+0x17a>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	0a 94       	dec	r0
 240:	e2 f7       	brpl	.-8      	; 0x23a <MDIO_voidSetPinDirection+0x176>
 242:	84 2b       	or	r24, r20
 244:	8c 93       	st	X, r24
 246:	4b c0       	rjmp	.+150    	; 0x2de <MDIO_voidSetPinDirection+0x21a>
						 break;
		case PIN_INPUT : CLR_BIT(DDRC_REG,A_u8PinId);
 248:	a4 e3       	ldi	r26, 0x34	; 52
 24a:	b0 e0       	ldi	r27, 0x00	; 0
 24c:	e4 e3       	ldi	r30, 0x34	; 52
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	48 2f       	mov	r20, r24
 254:	8a 81       	ldd	r24, Y+2	; 0x02
 256:	28 2f       	mov	r18, r24
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 2e       	mov	r0, r18
 260:	02 c0       	rjmp	.+4      	; 0x266 <MDIO_voidSetPinDirection+0x1a2>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	0a 94       	dec	r0
 268:	e2 f7       	brpl	.-8      	; 0x262 <MDIO_voidSetPinDirection+0x19e>
 26a:	80 95       	com	r24
 26c:	84 23       	and	r24, r20
 26e:	8c 93       	st	X, r24
 270:	36 c0       	rjmp	.+108    	; 0x2de <MDIO_voidSetPinDirection+0x21a>
		default:
				break;
		}
		break;
	case PORTD:
		switch(A_u8Direction)
 272:	8b 81       	ldd	r24, Y+3	; 0x03
 274:	28 2f       	mov	r18, r24
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	3d 83       	std	Y+5, r19	; 0x05
 27a:	2c 83       	std	Y+4, r18	; 0x04
 27c:	8c 81       	ldd	r24, Y+4	; 0x04
 27e:	9d 81       	ldd	r25, Y+5	; 0x05
 280:	00 97       	sbiw	r24, 0x00	; 0
 282:	c9 f0       	breq	.+50     	; 0x2b6 <MDIO_voidSetPinDirection+0x1f2>
 284:	2c 81       	ldd	r18, Y+4	; 0x04
 286:	3d 81       	ldd	r19, Y+5	; 0x05
 288:	21 30       	cpi	r18, 0x01	; 1
 28a:	31 05       	cpc	r19, r1
 28c:	41 f5       	brne	.+80     	; 0x2de <MDIO_voidSetPinDirection+0x21a>
		{
		case PIN_OUTPUT: SET_BIT(DDRD_REG,A_u8PinId);
 28e:	a1 e3       	ldi	r26, 0x31	; 49
 290:	b0 e0       	ldi	r27, 0x00	; 0
 292:	e1 e3       	ldi	r30, 0x31	; 49
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	48 2f       	mov	r20, r24
 29a:	8a 81       	ldd	r24, Y+2	; 0x02
 29c:	28 2f       	mov	r18, r24
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 2e       	mov	r0, r18
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <MDIO_voidSetPinDirection+0x1e8>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	0a 94       	dec	r0
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <MDIO_voidSetPinDirection+0x1e4>
 2b0:	84 2b       	or	r24, r20
 2b2:	8c 93       	st	X, r24
 2b4:	14 c0       	rjmp	.+40     	; 0x2de <MDIO_voidSetPinDirection+0x21a>
						 break;
		case PIN_INPUT : CLR_BIT(DDRD_REG,A_u8PinId);
 2b6:	a1 e3       	ldi	r26, 0x31	; 49
 2b8:	b0 e0       	ldi	r27, 0x00	; 0
 2ba:	e1 e3       	ldi	r30, 0x31	; 49
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	48 2f       	mov	r20, r24
 2c2:	8a 81       	ldd	r24, Y+2	; 0x02
 2c4:	28 2f       	mov	r18, r24
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 2e       	mov	r0, r18
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <MDIO_voidSetPinDirection+0x210>
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	0a 94       	dec	r0
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <MDIO_voidSetPinDirection+0x20c>
 2d8:	80 95       	com	r24
 2da:	84 23       	and	r24, r20
 2dc:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
 2de:	2d 96       	adiw	r28, 0x0d	; 13
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	f8 94       	cli
 2e4:	de bf       	out	0x3e, r29	; 62
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	cd bf       	out	0x3d, r28	; 61
 2ea:	cf 91       	pop	r28
 2ec:	df 91       	pop	r29
 2ee:	08 95       	ret

000002f0 <MDIO_voidSetPinValue>:
// PORT ID :- POTRTA - PORTB - PORTC - PORTD
// PIN ID :- PIN0 ... PIN7
// PIN VALUE:- PIN_LOW - PIN_HIGH
void MDIO_voidSetPinValue (u8 A_u8PortId, u8 A_u8PinId, u8 A_u8Value)
{
 2f0:	df 93       	push	r29
 2f2:	cf 93       	push	r28
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
 2f8:	2d 97       	sbiw	r28, 0x0d	; 13
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	f8 94       	cli
 2fe:	de bf       	out	0x3e, r29	; 62
 300:	0f be       	out	0x3f, r0	; 63
 302:	cd bf       	out	0x3d, r28	; 61
 304:	89 83       	std	Y+1, r24	; 0x01
 306:	6a 83       	std	Y+2, r22	; 0x02
 308:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8PortId)
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	28 2f       	mov	r18, r24
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	3d 87       	std	Y+13, r19	; 0x0d
 312:	2c 87       	std	Y+12, r18	; 0x0c
 314:	8c 85       	ldd	r24, Y+12	; 0x0c
 316:	9d 85       	ldd	r25, Y+13	; 0x0d
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	91 05       	cpc	r25, r1
 31c:	09 f4       	brne	.+2      	; 0x320 <MDIO_voidSetPinValue+0x30>
 31e:	4f c0       	rjmp	.+158    	; 0x3be <MDIO_voidSetPinValue+0xce>
 320:	2c 85       	ldd	r18, Y+12	; 0x0c
 322:	3d 85       	ldd	r19, Y+13	; 0x0d
 324:	22 30       	cpi	r18, 0x02	; 2
 326:	31 05       	cpc	r19, r1
 328:	2c f4       	brge	.+10     	; 0x334 <MDIO_voidSetPinValue+0x44>
 32a:	8c 85       	ldd	r24, Y+12	; 0x0c
 32c:	9d 85       	ldd	r25, Y+13	; 0x0d
 32e:	00 97       	sbiw	r24, 0x00	; 0
 330:	71 f0       	breq	.+28     	; 0x34e <MDIO_voidSetPinValue+0x5e>
 332:	eb c0       	rjmp	.+470    	; 0x50a <MDIO_voidSetPinValue+0x21a>
 334:	2c 85       	ldd	r18, Y+12	; 0x0c
 336:	3d 85       	ldd	r19, Y+13	; 0x0d
 338:	22 30       	cpi	r18, 0x02	; 2
 33a:	31 05       	cpc	r19, r1
 33c:	09 f4       	brne	.+2      	; 0x340 <MDIO_voidSetPinValue+0x50>
 33e:	77 c0       	rjmp	.+238    	; 0x42e <MDIO_voidSetPinValue+0x13e>
 340:	8c 85       	ldd	r24, Y+12	; 0x0c
 342:	9d 85       	ldd	r25, Y+13	; 0x0d
 344:	83 30       	cpi	r24, 0x03	; 3
 346:	91 05       	cpc	r25, r1
 348:	09 f4       	brne	.+2      	; 0x34c <MDIO_voidSetPinValue+0x5c>
 34a:	a9 c0       	rjmp	.+338    	; 0x49e <MDIO_voidSetPinValue+0x1ae>
 34c:	de c0       	rjmp	.+444    	; 0x50a <MDIO_voidSetPinValue+0x21a>
		{
		case PORTA:
			switch(A_u8Value)
 34e:	8b 81       	ldd	r24, Y+3	; 0x03
 350:	28 2f       	mov	r18, r24
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	3b 87       	std	Y+11, r19	; 0x0b
 356:	2a 87       	std	Y+10, r18	; 0x0a
 358:	8a 85       	ldd	r24, Y+10	; 0x0a
 35a:	9b 85       	ldd	r25, Y+11	; 0x0b
 35c:	00 97       	sbiw	r24, 0x00	; 0
 35e:	d1 f0       	breq	.+52     	; 0x394 <MDIO_voidSetPinValue+0xa4>
 360:	2a 85       	ldd	r18, Y+10	; 0x0a
 362:	3b 85       	ldd	r19, Y+11	; 0x0b
 364:	21 30       	cpi	r18, 0x01	; 1
 366:	31 05       	cpc	r19, r1
 368:	09 f0       	breq	.+2      	; 0x36c <MDIO_voidSetPinValue+0x7c>
 36a:	cf c0       	rjmp	.+414    	; 0x50a <MDIO_voidSetPinValue+0x21a>
			{
			case PIN_HIGH: SET_BIT(PORTA_REG,A_u8PinId);
 36c:	ab e3       	ldi	r26, 0x3B	; 59
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	eb e3       	ldi	r30, 0x3B	; 59
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	48 2f       	mov	r20, r24
 378:	8a 81       	ldd	r24, Y+2	; 0x02
 37a:	28 2f       	mov	r18, r24
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 2e       	mov	r0, r18
 384:	02 c0       	rjmp	.+4      	; 0x38a <MDIO_voidSetPinValue+0x9a>
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	0a 94       	dec	r0
 38c:	e2 f7       	brpl	.-8      	; 0x386 <MDIO_voidSetPinValue+0x96>
 38e:	84 2b       	or	r24, r20
 390:	8c 93       	st	X, r24
 392:	bb c0       	rjmp	.+374    	; 0x50a <MDIO_voidSetPinValue+0x21a>
						   break;
			case PIN_LOW : CLR_BIT(PORTA_REG,A_u8PinId);
 394:	ab e3       	ldi	r26, 0x3B	; 59
 396:	b0 e0       	ldi	r27, 0x00	; 0
 398:	eb e3       	ldi	r30, 0x3B	; 59
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	48 2f       	mov	r20, r24
 3a0:	8a 81       	ldd	r24, Y+2	; 0x02
 3a2:	28 2f       	mov	r18, r24
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	02 2e       	mov	r0, r18
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <MDIO_voidSetPinValue+0xc2>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	0a 94       	dec	r0
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <MDIO_voidSetPinValue+0xbe>
 3b6:	80 95       	com	r24
 3b8:	84 23       	and	r24, r20
 3ba:	8c 93       	st	X, r24
 3bc:	a6 c0       	rjmp	.+332    	; 0x50a <MDIO_voidSetPinValue+0x21a>
			default:
					 break;
			}
			break;
		case PORTB:
			switch(A_u8Value)
 3be:	8b 81       	ldd	r24, Y+3	; 0x03
 3c0:	28 2f       	mov	r18, r24
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	39 87       	std	Y+9, r19	; 0x09
 3c6:	28 87       	std	Y+8, r18	; 0x08
 3c8:	88 85       	ldd	r24, Y+8	; 0x08
 3ca:	99 85       	ldd	r25, Y+9	; 0x09
 3cc:	00 97       	sbiw	r24, 0x00	; 0
 3ce:	d1 f0       	breq	.+52     	; 0x404 <MDIO_voidSetPinValue+0x114>
 3d0:	28 85       	ldd	r18, Y+8	; 0x08
 3d2:	39 85       	ldd	r19, Y+9	; 0x09
 3d4:	21 30       	cpi	r18, 0x01	; 1
 3d6:	31 05       	cpc	r19, r1
 3d8:	09 f0       	breq	.+2      	; 0x3dc <MDIO_voidSetPinValue+0xec>
 3da:	97 c0       	rjmp	.+302    	; 0x50a <MDIO_voidSetPinValue+0x21a>
			{
			case PIN_HIGH: SET_BIT(PORTB_REG,A_u8PinId);
 3dc:	a8 e3       	ldi	r26, 0x38	; 56
 3de:	b0 e0       	ldi	r27, 0x00	; 0
 3e0:	e8 e3       	ldi	r30, 0x38	; 56
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	48 2f       	mov	r20, r24
 3e8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ea:	28 2f       	mov	r18, r24
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 2e       	mov	r0, r18
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <MDIO_voidSetPinValue+0x10a>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	0a 94       	dec	r0
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <MDIO_voidSetPinValue+0x106>
 3fe:	84 2b       	or	r24, r20
 400:	8c 93       	st	X, r24
 402:	83 c0       	rjmp	.+262    	; 0x50a <MDIO_voidSetPinValue+0x21a>
					       break;
			case PIN_LOW : CLR_BIT(PORTB_REG,A_u8PinId);
 404:	a8 e3       	ldi	r26, 0x38	; 56
 406:	b0 e0       	ldi	r27, 0x00	; 0
 408:	e8 e3       	ldi	r30, 0x38	; 56
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	48 2f       	mov	r20, r24
 410:	8a 81       	ldd	r24, Y+2	; 0x02
 412:	28 2f       	mov	r18, r24
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	02 2e       	mov	r0, r18
 41c:	02 c0       	rjmp	.+4      	; 0x422 <MDIO_voidSetPinValue+0x132>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	0a 94       	dec	r0
 424:	e2 f7       	brpl	.-8      	; 0x41e <MDIO_voidSetPinValue+0x12e>
 426:	80 95       	com	r24
 428:	84 23       	and	r24, r20
 42a:	8c 93       	st	X, r24
 42c:	6e c0       	rjmp	.+220    	; 0x50a <MDIO_voidSetPinValue+0x21a>
			default:
					break;
			}
			break;
		case PORTC:
			switch(A_u8Value)
 42e:	8b 81       	ldd	r24, Y+3	; 0x03
 430:	28 2f       	mov	r18, r24
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	3f 83       	std	Y+7, r19	; 0x07
 436:	2e 83       	std	Y+6, r18	; 0x06
 438:	8e 81       	ldd	r24, Y+6	; 0x06
 43a:	9f 81       	ldd	r25, Y+7	; 0x07
 43c:	00 97       	sbiw	r24, 0x00	; 0
 43e:	d1 f0       	breq	.+52     	; 0x474 <MDIO_voidSetPinValue+0x184>
 440:	2e 81       	ldd	r18, Y+6	; 0x06
 442:	3f 81       	ldd	r19, Y+7	; 0x07
 444:	21 30       	cpi	r18, 0x01	; 1
 446:	31 05       	cpc	r19, r1
 448:	09 f0       	breq	.+2      	; 0x44c <MDIO_voidSetPinValue+0x15c>
 44a:	5f c0       	rjmp	.+190    	; 0x50a <MDIO_voidSetPinValue+0x21a>
			{
			case PIN_HIGH: SET_BIT(PORTC_REG,A_u8PinId);
 44c:	a5 e3       	ldi	r26, 0x35	; 53
 44e:	b0 e0       	ldi	r27, 0x00	; 0
 450:	e5 e3       	ldi	r30, 0x35	; 53
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	80 81       	ld	r24, Z
 456:	48 2f       	mov	r20, r24
 458:	8a 81       	ldd	r24, Y+2	; 0x02
 45a:	28 2f       	mov	r18, r24
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	02 2e       	mov	r0, r18
 464:	02 c0       	rjmp	.+4      	; 0x46a <MDIO_voidSetPinValue+0x17a>
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	0a 94       	dec	r0
 46c:	e2 f7       	brpl	.-8      	; 0x466 <MDIO_voidSetPinValue+0x176>
 46e:	84 2b       	or	r24, r20
 470:	8c 93       	st	X, r24
 472:	4b c0       	rjmp	.+150    	; 0x50a <MDIO_voidSetPinValue+0x21a>
						   break;
			case PIN_LOW : CLR_BIT(PORTC_REG,A_u8PinId);
 474:	a5 e3       	ldi	r26, 0x35	; 53
 476:	b0 e0       	ldi	r27, 0x00	; 0
 478:	e5 e3       	ldi	r30, 0x35	; 53
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	80 81       	ld	r24, Z
 47e:	48 2f       	mov	r20, r24
 480:	8a 81       	ldd	r24, Y+2	; 0x02
 482:	28 2f       	mov	r18, r24
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	02 2e       	mov	r0, r18
 48c:	02 c0       	rjmp	.+4      	; 0x492 <MDIO_voidSetPinValue+0x1a2>
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	0a 94       	dec	r0
 494:	e2 f7       	brpl	.-8      	; 0x48e <MDIO_voidSetPinValue+0x19e>
 496:	80 95       	com	r24
 498:	84 23       	and	r24, r20
 49a:	8c 93       	st	X, r24
 49c:	36 c0       	rjmp	.+108    	; 0x50a <MDIO_voidSetPinValue+0x21a>
			default:
					break;
			}
			break;
		case PORTD:
			switch(A_u8Value)
 49e:	8b 81       	ldd	r24, Y+3	; 0x03
 4a0:	28 2f       	mov	r18, r24
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	3d 83       	std	Y+5, r19	; 0x05
 4a6:	2c 83       	std	Y+4, r18	; 0x04
 4a8:	8c 81       	ldd	r24, Y+4	; 0x04
 4aa:	9d 81       	ldd	r25, Y+5	; 0x05
 4ac:	00 97       	sbiw	r24, 0x00	; 0
 4ae:	c9 f0       	breq	.+50     	; 0x4e2 <MDIO_voidSetPinValue+0x1f2>
 4b0:	2c 81       	ldd	r18, Y+4	; 0x04
 4b2:	3d 81       	ldd	r19, Y+5	; 0x05
 4b4:	21 30       	cpi	r18, 0x01	; 1
 4b6:	31 05       	cpc	r19, r1
 4b8:	41 f5       	brne	.+80     	; 0x50a <MDIO_voidSetPinValue+0x21a>
			{
			case PIN_HIGH: SET_BIT(PORTD_REG,A_u8PinId);
 4ba:	a2 e3       	ldi	r26, 0x32	; 50
 4bc:	b0 e0       	ldi	r27, 0x00	; 0
 4be:	e2 e3       	ldi	r30, 0x32	; 50
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	48 2f       	mov	r20, r24
 4c6:	8a 81       	ldd	r24, Y+2	; 0x02
 4c8:	28 2f       	mov	r18, r24
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	02 2e       	mov	r0, r18
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <MDIO_voidSetPinValue+0x1e8>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	0a 94       	dec	r0
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <MDIO_voidSetPinValue+0x1e4>
 4dc:	84 2b       	or	r24, r20
 4de:	8c 93       	st	X, r24
 4e0:	14 c0       	rjmp	.+40     	; 0x50a <MDIO_voidSetPinValue+0x21a>
							 break;
			case PIN_LOW : CLR_BIT(PORTD_REG,A_u8PinId);
 4e2:	a2 e3       	ldi	r26, 0x32	; 50
 4e4:	b0 e0       	ldi	r27, 0x00	; 0
 4e6:	e2 e3       	ldi	r30, 0x32	; 50
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	48 2f       	mov	r20, r24
 4ee:	8a 81       	ldd	r24, Y+2	; 0x02
 4f0:	28 2f       	mov	r18, r24
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	02 2e       	mov	r0, r18
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <MDIO_voidSetPinValue+0x210>
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	0a 94       	dec	r0
 502:	e2 f7       	brpl	.-8      	; 0x4fc <MDIO_voidSetPinValue+0x20c>
 504:	80 95       	com	r24
 506:	84 23       	and	r24, r20
 508:	8c 93       	st	X, r24
		default:
			break;
		}


}
 50a:	2d 96       	adiw	r28, 0x0d	; 13
 50c:	0f b6       	in	r0, 0x3f	; 63
 50e:	f8 94       	cli
 510:	de bf       	out	0x3e, r29	; 62
 512:	0f be       	out	0x3f, r0	; 63
 514:	cd bf       	out	0x3d, r28	; 61
 516:	cf 91       	pop	r28
 518:	df 91       	pop	r29
 51a:	08 95       	ret

0000051c <MDIO_u8GetPinValue>:

// PORT ID :- POTRTA - PORTB - PORTC - PORTD
// PIN ID :- PIN0 ... PIN7
u8 MDIO_u8GetPinValue(u8 A_u8PortId, u8 A_u8PinId)
{
 51c:	df 93       	push	r29
 51e:	cf 93       	push	r28
 520:	00 d0       	rcall	.+0      	; 0x522 <MDIO_u8GetPinValue+0x6>
 522:	00 d0       	rcall	.+0      	; 0x524 <MDIO_u8GetPinValue+0x8>
 524:	0f 92       	push	r0
 526:	cd b7       	in	r28, 0x3d	; 61
 528:	de b7       	in	r29, 0x3e	; 62
 52a:	8a 83       	std	Y+2, r24	; 0x02
 52c:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8PinValue=0;
 52e:	19 82       	std	Y+1, r1	; 0x01
	switch(A_u8PortId)
 530:	8a 81       	ldd	r24, Y+2	; 0x02
 532:	28 2f       	mov	r18, r24
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	3d 83       	std	Y+5, r19	; 0x05
 538:	2c 83       	std	Y+4, r18	; 0x04
 53a:	4c 81       	ldd	r20, Y+4	; 0x04
 53c:	5d 81       	ldd	r21, Y+5	; 0x05
 53e:	41 30       	cpi	r20, 0x01	; 1
 540:	51 05       	cpc	r21, r1
 542:	41 f1       	breq	.+80     	; 0x594 <MDIO_u8GetPinValue+0x78>
 544:	8c 81       	ldd	r24, Y+4	; 0x04
 546:	9d 81       	ldd	r25, Y+5	; 0x05
 548:	82 30       	cpi	r24, 0x02	; 2
 54a:	91 05       	cpc	r25, r1
 54c:	34 f4       	brge	.+12     	; 0x55a <MDIO_u8GetPinValue+0x3e>
 54e:	2c 81       	ldd	r18, Y+4	; 0x04
 550:	3d 81       	ldd	r19, Y+5	; 0x05
 552:	21 15       	cp	r18, r1
 554:	31 05       	cpc	r19, r1
 556:	61 f0       	breq	.+24     	; 0x570 <MDIO_u8GetPinValue+0x54>
 558:	52 c0       	rjmp	.+164    	; 0x5fe <MDIO_u8GetPinValue+0xe2>
 55a:	4c 81       	ldd	r20, Y+4	; 0x04
 55c:	5d 81       	ldd	r21, Y+5	; 0x05
 55e:	42 30       	cpi	r20, 0x02	; 2
 560:	51 05       	cpc	r21, r1
 562:	51 f1       	breq	.+84     	; 0x5b8 <MDIO_u8GetPinValue+0x9c>
 564:	8c 81       	ldd	r24, Y+4	; 0x04
 566:	9d 81       	ldd	r25, Y+5	; 0x05
 568:	83 30       	cpi	r24, 0x03	; 3
 56a:	91 05       	cpc	r25, r1
 56c:	b9 f1       	breq	.+110    	; 0x5dc <MDIO_u8GetPinValue+0xc0>
 56e:	47 c0       	rjmp	.+142    	; 0x5fe <MDIO_u8GetPinValue+0xe2>
	{
	case PORTA: local_u8PinValue = GET_BIT(PINA_REG,A_u8PinId);
 570:	e9 e3       	ldi	r30, 0x39	; 57
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	80 81       	ld	r24, Z
 576:	28 2f       	mov	r18, r24
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	8b 81       	ldd	r24, Y+3	; 0x03
 57c:	88 2f       	mov	r24, r24
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	a9 01       	movw	r20, r18
 582:	02 c0       	rjmp	.+4      	; 0x588 <MDIO_u8GetPinValue+0x6c>
 584:	55 95       	asr	r21
 586:	47 95       	ror	r20
 588:	8a 95       	dec	r24
 58a:	e2 f7       	brpl	.-8      	; 0x584 <MDIO_u8GetPinValue+0x68>
 58c:	ca 01       	movw	r24, r20
 58e:	81 70       	andi	r24, 0x01	; 1
 590:	89 83       	std	Y+1, r24	; 0x01
 592:	35 c0       	rjmp	.+106    	; 0x5fe <MDIO_u8GetPinValue+0xe2>
				break;
	case PORTB: local_u8PinValue = GET_BIT(PINB_REG,A_u8PinId);
 594:	e6 e3       	ldi	r30, 0x36	; 54
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	80 81       	ld	r24, Z
 59a:	28 2f       	mov	r18, r24
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	8b 81       	ldd	r24, Y+3	; 0x03
 5a0:	88 2f       	mov	r24, r24
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	a9 01       	movw	r20, r18
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <MDIO_u8GetPinValue+0x90>
 5a8:	55 95       	asr	r21
 5aa:	47 95       	ror	r20
 5ac:	8a 95       	dec	r24
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <MDIO_u8GetPinValue+0x8c>
 5b0:	ca 01       	movw	r24, r20
 5b2:	81 70       	andi	r24, 0x01	; 1
 5b4:	89 83       	std	Y+1, r24	; 0x01
 5b6:	23 c0       	rjmp	.+70     	; 0x5fe <MDIO_u8GetPinValue+0xe2>
				break;
	case PORTC: local_u8PinValue = GET_BIT(PINC_REG,A_u8PinId);
 5b8:	e3 e3       	ldi	r30, 0x33	; 51
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	80 81       	ld	r24, Z
 5be:	28 2f       	mov	r18, r24
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	8b 81       	ldd	r24, Y+3	; 0x03
 5c4:	88 2f       	mov	r24, r24
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	a9 01       	movw	r20, r18
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <MDIO_u8GetPinValue+0xb4>
 5cc:	55 95       	asr	r21
 5ce:	47 95       	ror	r20
 5d0:	8a 95       	dec	r24
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <MDIO_u8GetPinValue+0xb0>
 5d4:	ca 01       	movw	r24, r20
 5d6:	81 70       	andi	r24, 0x01	; 1
 5d8:	89 83       	std	Y+1, r24	; 0x01
 5da:	11 c0       	rjmp	.+34     	; 0x5fe <MDIO_u8GetPinValue+0xe2>
				break;
	case PORTD: local_u8PinValue = GET_BIT(PIND_REG,A_u8PinId);
 5dc:	e0 e3       	ldi	r30, 0x30	; 48
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	80 81       	ld	r24, Z
 5e2:	28 2f       	mov	r18, r24
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	8b 81       	ldd	r24, Y+3	; 0x03
 5e8:	88 2f       	mov	r24, r24
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	a9 01       	movw	r20, r18
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <MDIO_u8GetPinValue+0xd8>
 5f0:	55 95       	asr	r21
 5f2:	47 95       	ror	r20
 5f4:	8a 95       	dec	r24
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <MDIO_u8GetPinValue+0xd4>
 5f8:	ca 01       	movw	r24, r20
 5fa:	81 70       	andi	r24, 0x01	; 1
 5fc:	89 83       	std	Y+1, r24	; 0x01
				break;
	default:	break;
	}
	return local_u8PinValue;
 5fe:	89 81       	ldd	r24, Y+1	; 0x01
}
 600:	0f 90       	pop	r0
 602:	0f 90       	pop	r0
 604:	0f 90       	pop	r0
 606:	0f 90       	pop	r0
 608:	0f 90       	pop	r0
 60a:	cf 91       	pop	r28
 60c:	df 91       	pop	r29
 60e:	08 95       	ret

00000610 <MDIO_voidSetPortValue>:
// PORT ID :- POTRTA - PORTB - PORTC - PORTD
// PORT VALUE:- PIN_LOW - PIN_HIGH
void MDIO_voidSetPortValue(u8 A_u8PortId, u8 A_u8Value)
{
 610:	df 93       	push	r29
 612:	cf 93       	push	r28
 614:	00 d0       	rcall	.+0      	; 0x616 <MDIO_voidSetPortValue+0x6>
 616:	00 d0       	rcall	.+0      	; 0x618 <MDIO_voidSetPortValue+0x8>
 618:	cd b7       	in	r28, 0x3d	; 61
 61a:	de b7       	in	r29, 0x3e	; 62
 61c:	89 83       	std	Y+1, r24	; 0x01
 61e:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortId)
 620:	89 81       	ldd	r24, Y+1	; 0x01
 622:	28 2f       	mov	r18, r24
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	3c 83       	std	Y+4, r19	; 0x04
 628:	2b 83       	std	Y+3, r18	; 0x03
 62a:	8b 81       	ldd	r24, Y+3	; 0x03
 62c:	9c 81       	ldd	r25, Y+4	; 0x04
 62e:	81 30       	cpi	r24, 0x01	; 1
 630:	91 05       	cpc	r25, r1
 632:	d1 f0       	breq	.+52     	; 0x668 <MDIO_voidSetPortValue+0x58>
 634:	2b 81       	ldd	r18, Y+3	; 0x03
 636:	3c 81       	ldd	r19, Y+4	; 0x04
 638:	22 30       	cpi	r18, 0x02	; 2
 63a:	31 05       	cpc	r19, r1
 63c:	2c f4       	brge	.+10     	; 0x648 <MDIO_voidSetPortValue+0x38>
 63e:	8b 81       	ldd	r24, Y+3	; 0x03
 640:	9c 81       	ldd	r25, Y+4	; 0x04
 642:	00 97       	sbiw	r24, 0x00	; 0
 644:	61 f0       	breq	.+24     	; 0x65e <MDIO_voidSetPortValue+0x4e>
 646:	1e c0       	rjmp	.+60     	; 0x684 <MDIO_voidSetPortValue+0x74>
 648:	2b 81       	ldd	r18, Y+3	; 0x03
 64a:	3c 81       	ldd	r19, Y+4	; 0x04
 64c:	22 30       	cpi	r18, 0x02	; 2
 64e:	31 05       	cpc	r19, r1
 650:	81 f0       	breq	.+32     	; 0x672 <MDIO_voidSetPortValue+0x62>
 652:	8b 81       	ldd	r24, Y+3	; 0x03
 654:	9c 81       	ldd	r25, Y+4	; 0x04
 656:	83 30       	cpi	r24, 0x03	; 3
 658:	91 05       	cpc	r25, r1
 65a:	81 f0       	breq	.+32     	; 0x67c <MDIO_voidSetPortValue+0x6c>
 65c:	13 c0       	rjmp	.+38     	; 0x684 <MDIO_voidSetPortValue+0x74>
		{
		case PORTA: PORTA_REG =A_u8Value;
 65e:	eb e3       	ldi	r30, 0x3B	; 59
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	8a 81       	ldd	r24, Y+2	; 0x02
 664:	80 83       	st	Z, r24
 666:	0e c0       	rjmp	.+28     	; 0x684 <MDIO_voidSetPortValue+0x74>
					break;
		case PORTB: PORTB_REG =A_u8Value;
 668:	e8 e3       	ldi	r30, 0x38	; 56
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	8a 81       	ldd	r24, Y+2	; 0x02
 66e:	80 83       	st	Z, r24
 670:	09 c0       	rjmp	.+18     	; 0x684 <MDIO_voidSetPortValue+0x74>
					break;
		case PORTC: PORTC_REG =A_u8Value;
 672:	e5 e3       	ldi	r30, 0x35	; 53
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	8a 81       	ldd	r24, Y+2	; 0x02
 678:	80 83       	st	Z, r24
 67a:	04 c0       	rjmp	.+8      	; 0x684 <MDIO_voidSetPortValue+0x74>
					break;
		case PORTD: PORTD_REG =A_u8Value;
 67c:	e2 e3       	ldi	r30, 0x32	; 50
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	8a 81       	ldd	r24, Y+2	; 0x02
 682:	80 83       	st	Z, r24
					break;
		default:	break;
		}
}
 684:	0f 90       	pop	r0
 686:	0f 90       	pop	r0
 688:	0f 90       	pop	r0
 68a:	0f 90       	pop	r0
 68c:	cf 91       	pop	r28
 68e:	df 91       	pop	r29
 690:	08 95       	ret

00000692 <MDIO_voidSetPortDirection>:
// PORT ID :- POTRTA - PORTB - PORTC - PORTD
// PORT DIRECTION:- PIN_INPUT - PIN_OUTPUT
void MDIO_voidSetPortDirection(u8 A_u8PortId, u8 A_u8Direction)
{
 692:	df 93       	push	r29
 694:	cf 93       	push	r28
 696:	00 d0       	rcall	.+0      	; 0x698 <MDIO_voidSetPortDirection+0x6>
 698:	00 d0       	rcall	.+0      	; 0x69a <MDIO_voidSetPortDirection+0x8>
 69a:	cd b7       	in	r28, 0x3d	; 61
 69c:	de b7       	in	r29, 0x3e	; 62
 69e:	89 83       	std	Y+1, r24	; 0x01
 6a0:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortId)
 6a2:	89 81       	ldd	r24, Y+1	; 0x01
 6a4:	28 2f       	mov	r18, r24
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	3c 83       	std	Y+4, r19	; 0x04
 6aa:	2b 83       	std	Y+3, r18	; 0x03
 6ac:	8b 81       	ldd	r24, Y+3	; 0x03
 6ae:	9c 81       	ldd	r25, Y+4	; 0x04
 6b0:	81 30       	cpi	r24, 0x01	; 1
 6b2:	91 05       	cpc	r25, r1
 6b4:	d1 f0       	breq	.+52     	; 0x6ea <MDIO_voidSetPortDirection+0x58>
 6b6:	2b 81       	ldd	r18, Y+3	; 0x03
 6b8:	3c 81       	ldd	r19, Y+4	; 0x04
 6ba:	22 30       	cpi	r18, 0x02	; 2
 6bc:	31 05       	cpc	r19, r1
 6be:	2c f4       	brge	.+10     	; 0x6ca <MDIO_voidSetPortDirection+0x38>
 6c0:	8b 81       	ldd	r24, Y+3	; 0x03
 6c2:	9c 81       	ldd	r25, Y+4	; 0x04
 6c4:	00 97       	sbiw	r24, 0x00	; 0
 6c6:	61 f0       	breq	.+24     	; 0x6e0 <MDIO_voidSetPortDirection+0x4e>
 6c8:	1e c0       	rjmp	.+60     	; 0x706 <MDIO_voidSetPortDirection+0x74>
 6ca:	2b 81       	ldd	r18, Y+3	; 0x03
 6cc:	3c 81       	ldd	r19, Y+4	; 0x04
 6ce:	22 30       	cpi	r18, 0x02	; 2
 6d0:	31 05       	cpc	r19, r1
 6d2:	81 f0       	breq	.+32     	; 0x6f4 <MDIO_voidSetPortDirection+0x62>
 6d4:	8b 81       	ldd	r24, Y+3	; 0x03
 6d6:	9c 81       	ldd	r25, Y+4	; 0x04
 6d8:	83 30       	cpi	r24, 0x03	; 3
 6da:	91 05       	cpc	r25, r1
 6dc:	81 f0       	breq	.+32     	; 0x6fe <MDIO_voidSetPortDirection+0x6c>
 6de:	13 c0       	rjmp	.+38     	; 0x706 <MDIO_voidSetPortDirection+0x74>
		{
		case PORTA: DDRA_REG = A_u8Direction;
 6e0:	ea e3       	ldi	r30, 0x3A	; 58
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	8a 81       	ldd	r24, Y+2	; 0x02
 6e6:	80 83       	st	Z, r24
 6e8:	0e c0       	rjmp	.+28     	; 0x706 <MDIO_voidSetPortDirection+0x74>
					break;
		case PORTB: DDRB_REG = A_u8Direction;
 6ea:	e7 e3       	ldi	r30, 0x37	; 55
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	8a 81       	ldd	r24, Y+2	; 0x02
 6f0:	80 83       	st	Z, r24
 6f2:	09 c0       	rjmp	.+18     	; 0x706 <MDIO_voidSetPortDirection+0x74>
					break;
		case PORTC: DDRC_REG = A_u8Direction;
 6f4:	e4 e3       	ldi	r30, 0x34	; 52
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	8a 81       	ldd	r24, Y+2	; 0x02
 6fa:	80 83       	st	Z, r24
 6fc:	04 c0       	rjmp	.+8      	; 0x706 <MDIO_voidSetPortDirection+0x74>
					break;
		case PORTD: DDRD_REG = A_u8Direction;
 6fe:	e1 e3       	ldi	r30, 0x31	; 49
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	8a 81       	ldd	r24, Y+2	; 0x02
 704:	80 83       	st	Z, r24
					break;
		default:	break;
		}
}
 706:	0f 90       	pop	r0
 708:	0f 90       	pop	r0
 70a:	0f 90       	pop	r0
 70c:	0f 90       	pop	r0
 70e:	cf 91       	pop	r28
 710:	df 91       	pop	r29
 712:	08 95       	ret

00000714 <MGI_voidEnable>:
#include "../include/MCAL/GI/GI_configuration.h"



void MGI_voidEnable(void)
{
 714:	df 93       	push	r29
 716:	cf 93       	push	r28
 718:	cd b7       	in	r28, 0x3d	; 61
 71a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
 71c:	af e5       	ldi	r26, 0x5F	; 95
 71e:	b0 e0       	ldi	r27, 0x00	; 0
 720:	ef e5       	ldi	r30, 0x5F	; 95
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	80 81       	ld	r24, Z
 726:	80 68       	ori	r24, 0x80	; 128
 728:	8c 93       	st	X, r24
}
 72a:	cf 91       	pop	r28
 72c:	df 91       	pop	r29
 72e:	08 95       	ret

00000730 <MGI_voidDisable>:
void MGI_voidDisable(void)
{
 730:	df 93       	push	r29
 732:	cf 93       	push	r28
 734:	cd b7       	in	r28, 0x3d	; 61
 736:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
 738:	af e5       	ldi	r26, 0x5F	; 95
 73a:	b0 e0       	ldi	r27, 0x00	; 0
 73c:	ef e5       	ldi	r30, 0x5F	; 95
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	80 81       	ld	r24, Z
 742:	8f 77       	andi	r24, 0x7F	; 127
 744:	8c 93       	st	X, r24
}
 746:	cf 91       	pop	r28
 748:	df 91       	pop	r29
 74a:	08 95       	ret

0000074c <MTIMER0_voidInit>:

/****************************************************/
/* 						TIMER0						*/
/****************************************************/
void MTIMER0_voidInit(void)
{
 74c:	df 93       	push	r29
 74e:	cf 93       	push	r28
 750:	cd b7       	in	r28, 0x3d	; 61
 752:	de b7       	in	r29, 0x3e	; 62
		/* SET CLK (PRESCALER) & OC0 PIN ACTION */
		TCCR0 &= 0b11001000;
		TCCR0 |= CLK_CONFIGURATION_TIMER0 | (CTC_OC0_PIN_ACTION << 4);
	#elif TIMER_MODE == FAST_PWM_MODE
		/* SET WAVE GENERATION MODE TO FASR_PWM_MODE */
		SET_BIT(TCCR0,3);
 754:	a3 e5       	ldi	r26, 0x53	; 83
 756:	b0 e0       	ldi	r27, 0x00	; 0
 758:	e3 e5       	ldi	r30, 0x53	; 83
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	80 81       	ld	r24, Z
 75e:	88 60       	ori	r24, 0x08	; 8
 760:	8c 93       	st	X, r24
		SET_BIT(TCCR0,6);
 762:	a3 e5       	ldi	r26, 0x53	; 83
 764:	b0 e0       	ldi	r27, 0x00	; 0
 766:	e3 e5       	ldi	r30, 0x53	; 83
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	80 81       	ld	r24, Z
 76c:	80 64       	ori	r24, 0x40	; 64
 76e:	8c 93       	st	X, r24
		/*SET ON COMPARE MATCH VALUE*/
		OCR0 = OCR0_VALUE;
 770:	ec e5       	ldi	r30, 0x5C	; 92
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	83 e6       	ldi	r24, 0x63	; 99
 776:	80 83       	st	Z, r24
		/* SET CLK (PRESCALER) & OC0 PIN ACTION */
		TCCR0 &= 0b11001000;
 778:	a3 e5       	ldi	r26, 0x53	; 83
 77a:	b0 e0       	ldi	r27, 0x00	; 0
 77c:	e3 e5       	ldi	r30, 0x53	; 83
 77e:	f0 e0       	ldi	r31, 0x00	; 0
 780:	80 81       	ld	r24, Z
 782:	88 7c       	andi	r24, 0xC8	; 200
 784:	8c 93       	st	X, r24
		TCCR0 |= CLK_CONFIGURATION_TIMER0 | (FAST_PWM_OC0_PIN_ACTION << 4);
 786:	a3 e5       	ldi	r26, 0x53	; 83
 788:	b0 e0       	ldi	r27, 0x00	; 0
 78a:	e3 e5       	ldi	r30, 0x53	; 83
 78c:	f0 e0       	ldi	r31, 0x00	; 0
 78e:	80 81       	ld	r24, Z
 790:	82 63       	ori	r24, 0x32	; 50
 792:	8c 93       	st	X, r24

	#else
			#error WRONG TIMER MODE CONFIGURATION
	#endif
}
 794:	cf 91       	pop	r28
 796:	df 91       	pop	r29
 798:	08 95       	ret

0000079a <MTIMER0_voidStopTimer>:
void MTIMER0_voidStopTimer(void)
{
 79a:	df 93       	push	r29
 79c:	cf 93       	push	r28
 79e:	cd b7       	in	r28, 0x3d	; 61
 7a0:	de b7       	in	r29, 0x3e	; 62
	/* STOP CLK */
	/*PRESCALER CLK*/
	TCCR0 &= 0b11111000;
 7a2:	a3 e5       	ldi	r26, 0x53	; 83
 7a4:	b0 e0       	ldi	r27, 0x00	; 0
 7a6:	e3 e5       	ldi	r30, 0x53	; 83
 7a8:	f0 e0       	ldi	r31, 0x00	; 0
 7aa:	80 81       	ld	r24, Z
 7ac:	88 7f       	andi	r24, 0xF8	; 248
 7ae:	8c 93       	st	X, r24
	TCCR0 |= 0b000;
 7b0:	a3 e5       	ldi	r26, 0x53	; 83
 7b2:	b0 e0       	ldi	r27, 0x00	; 0
 7b4:	e3 e5       	ldi	r30, 0x53	; 83
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	80 81       	ld	r24, Z
 7ba:	8c 93       	st	X, r24
}
 7bc:	cf 91       	pop	r28
 7be:	df 91       	pop	r29
 7c0:	08 95       	ret

000007c2 <MTIMER0_voidSetPreloadValue>:

void MTIMER0_voidSetPreloadValue(u8 A_u8PreloadValue)
{
 7c2:	df 93       	push	r29
 7c4:	cf 93       	push	r28
 7c6:	0f 92       	push	r0
 7c8:	cd b7       	in	r28, 0x3d	; 61
 7ca:	de b7       	in	r29, 0x3e	; 62
 7cc:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = A_u8PreloadValue;
 7ce:	e2 e5       	ldi	r30, 0x52	; 82
 7d0:	f0 e0       	ldi	r31, 0x00	; 0
 7d2:	89 81       	ldd	r24, Y+1	; 0x01
 7d4:	80 83       	st	Z, r24
}
 7d6:	0f 90       	pop	r0
 7d8:	cf 91       	pop	r28
 7da:	df 91       	pop	r29
 7dc:	08 95       	ret

000007de <MTIMER0_voidSetOCR0Value>:
/*SET OCR0 VALUE ON REAL-TIME*/
void MTIMER0_voidSetOCR0Value(u8 A_u8OCR0Value)
{
 7de:	df 93       	push	r29
 7e0:	cf 93       	push	r28
 7e2:	0f 92       	push	r0
 7e4:	cd b7       	in	r28, 0x3d	; 61
 7e6:	de b7       	in	r29, 0x3e	; 62
 7e8:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = A_u8OCR0Value;
 7ea:	ec e5       	ldi	r30, 0x5C	; 92
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	89 81       	ldd	r24, Y+1	; 0x01
 7f0:	80 83       	st	Z, r24
}
 7f2:	0f 90       	pop	r0
 7f4:	cf 91       	pop	r28
 7f6:	df 91       	pop	r29
 7f8:	08 95       	ret

000007fa <MTIMER0_voidSetCallBackOVF>:

/* INTERRUPT NORMAL MODE */
void (*TIMER0_OVF_CallBack)(void) = NULL;

void MTIMER0_voidSetCallBackOVF(void (*PtrToFunction)(void))
{
 7fa:	df 93       	push	r29
 7fc:	cf 93       	push	r28
 7fe:	00 d0       	rcall	.+0      	; 0x800 <MTIMER0_voidSetCallBackOVF+0x6>
 800:	cd b7       	in	r28, 0x3d	; 61
 802:	de b7       	in	r29, 0x3e	; 62
 804:	9a 83       	std	Y+2, r25	; 0x02
 806:	89 83       	std	Y+1, r24	; 0x01
	if(PtrToFunction != NULL)
 808:	89 81       	ldd	r24, Y+1	; 0x01
 80a:	9a 81       	ldd	r25, Y+2	; 0x02
 80c:	00 97       	sbiw	r24, 0x00	; 0
 80e:	31 f0       	breq	.+12     	; 0x81c <MTIMER0_voidSetCallBackOVF+0x22>
	{
	 TIMER0_OVF_CallBack = PtrToFunction;
 810:	89 81       	ldd	r24, Y+1	; 0x01
 812:	9a 81       	ldd	r25, Y+2	; 0x02
 814:	90 93 61 00 	sts	0x0061, r25
 818:	80 93 60 00 	sts	0x0060, r24
	}
}
 81c:	0f 90       	pop	r0
 81e:	0f 90       	pop	r0
 820:	cf 91       	pop	r28
 822:	df 91       	pop	r29
 824:	08 95       	ret

00000826 <__vector_11>:
void __vector_11(void)  __attribute__((signal));
void __vector_11(void)
{
 826:	1f 92       	push	r1
 828:	0f 92       	push	r0
 82a:	0f b6       	in	r0, 0x3f	; 63
 82c:	0f 92       	push	r0
 82e:	11 24       	eor	r1, r1
 830:	2f 93       	push	r18
 832:	3f 93       	push	r19
 834:	4f 93       	push	r20
 836:	5f 93       	push	r21
 838:	6f 93       	push	r22
 83a:	7f 93       	push	r23
 83c:	8f 93       	push	r24
 83e:	9f 93       	push	r25
 840:	af 93       	push	r26
 842:	bf 93       	push	r27
 844:	ef 93       	push	r30
 846:	ff 93       	push	r31
 848:	df 93       	push	r29
 84a:	cf 93       	push	r28
 84c:	cd b7       	in	r28, 0x3d	; 61
 84e:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_OVF_CallBack != NULL)
 850:	80 91 60 00 	lds	r24, 0x0060
 854:	90 91 61 00 	lds	r25, 0x0061
 858:	00 97       	sbiw	r24, 0x00	; 0
 85a:	29 f0       	breq	.+10     	; 0x866 <__stack+0x7>
	{
		TIMER0_OVF_CallBack();
 85c:	e0 91 60 00 	lds	r30, 0x0060
 860:	f0 91 61 00 	lds	r31, 0x0061
 864:	09 95       	icall
	}
}
 866:	cf 91       	pop	r28
 868:	df 91       	pop	r29
 86a:	ff 91       	pop	r31
 86c:	ef 91       	pop	r30
 86e:	bf 91       	pop	r27
 870:	af 91       	pop	r26
 872:	9f 91       	pop	r25
 874:	8f 91       	pop	r24
 876:	7f 91       	pop	r23
 878:	6f 91       	pop	r22
 87a:	5f 91       	pop	r21
 87c:	4f 91       	pop	r20
 87e:	3f 91       	pop	r19
 880:	2f 91       	pop	r18
 882:	0f 90       	pop	r0
 884:	0f be       	out	0x3f, r0	; 63
 886:	0f 90       	pop	r0
 888:	1f 90       	pop	r1
 88a:	18 95       	reti

0000088c <MTIMER0_voidSetCallBackCTC>:

/* INTERRUPT CTC MODE */
void (*TIMER0_CTC_CallBack)(void) = NULL;

void MTIMER0_voidSetCallBackCTC(void (*PtrToFunction)(void))
{
 88c:	df 93       	push	r29
 88e:	cf 93       	push	r28
 890:	00 d0       	rcall	.+0      	; 0x892 <MTIMER0_voidSetCallBackCTC+0x6>
 892:	cd b7       	in	r28, 0x3d	; 61
 894:	de b7       	in	r29, 0x3e	; 62
 896:	9a 83       	std	Y+2, r25	; 0x02
 898:	89 83       	std	Y+1, r24	; 0x01
	if(PtrToFunction != NULL)
 89a:	89 81       	ldd	r24, Y+1	; 0x01
 89c:	9a 81       	ldd	r25, Y+2	; 0x02
 89e:	00 97       	sbiw	r24, 0x00	; 0
 8a0:	31 f0       	breq	.+12     	; 0x8ae <MTIMER0_voidSetCallBackCTC+0x22>
	{
	 TIMER0_CTC_CallBack = PtrToFunction;
 8a2:	89 81       	ldd	r24, Y+1	; 0x01
 8a4:	9a 81       	ldd	r25, Y+2	; 0x02
 8a6:	90 93 63 00 	sts	0x0063, r25
 8aa:	80 93 62 00 	sts	0x0062, r24
	}
}
 8ae:	0f 90       	pop	r0
 8b0:	0f 90       	pop	r0
 8b2:	cf 91       	pop	r28
 8b4:	df 91       	pop	r29
 8b6:	08 95       	ret

000008b8 <__vector_10>:
void __vector_10(void)  __attribute__((signal));
void __vector_10(void)
{
 8b8:	1f 92       	push	r1
 8ba:	0f 92       	push	r0
 8bc:	0f b6       	in	r0, 0x3f	; 63
 8be:	0f 92       	push	r0
 8c0:	11 24       	eor	r1, r1
 8c2:	2f 93       	push	r18
 8c4:	3f 93       	push	r19
 8c6:	4f 93       	push	r20
 8c8:	5f 93       	push	r21
 8ca:	6f 93       	push	r22
 8cc:	7f 93       	push	r23
 8ce:	8f 93       	push	r24
 8d0:	9f 93       	push	r25
 8d2:	af 93       	push	r26
 8d4:	bf 93       	push	r27
 8d6:	ef 93       	push	r30
 8d8:	ff 93       	push	r31
 8da:	df 93       	push	r29
 8dc:	cf 93       	push	r28
 8de:	cd b7       	in	r28, 0x3d	; 61
 8e0:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_CTC_CallBack != NULL)
 8e2:	80 91 62 00 	lds	r24, 0x0062
 8e6:	90 91 63 00 	lds	r25, 0x0063
 8ea:	00 97       	sbiw	r24, 0x00	; 0
 8ec:	29 f0       	breq	.+10     	; 0x8f8 <__vector_10+0x40>
	{
		TIMER0_CTC_CallBack();
 8ee:	e0 91 62 00 	lds	r30, 0x0062
 8f2:	f0 91 63 00 	lds	r31, 0x0063
 8f6:	09 95       	icall
	}
}
 8f8:	cf 91       	pop	r28
 8fa:	df 91       	pop	r29
 8fc:	ff 91       	pop	r31
 8fe:	ef 91       	pop	r30
 900:	bf 91       	pop	r27
 902:	af 91       	pop	r26
 904:	9f 91       	pop	r25
 906:	8f 91       	pop	r24
 908:	7f 91       	pop	r23
 90a:	6f 91       	pop	r22
 90c:	5f 91       	pop	r21
 90e:	4f 91       	pop	r20
 910:	3f 91       	pop	r19
 912:	2f 91       	pop	r18
 914:	0f 90       	pop	r0
 916:	0f be       	out	0x3f, r0	; 63
 918:	0f 90       	pop	r0
 91a:	1f 90       	pop	r1
 91c:	18 95       	reti

0000091e <MTIMER1_voidInit>:
/****************************************************/
/* 						TIMER1						*/
/****************************************************/
void MTIMER1_voidInit(void)
{
 91e:	df 93       	push	r29
 920:	cf 93       	push	r28
 922:	cd b7       	in	r28, 0x3d	; 61
 924:	de b7       	in	r29, 0x3e	; 62
		/* SET CLK (PRESCALER)  */
		TCCR1B &= 0b10011000;
		TCCR1B |= CLK_CONFIGURATION_TIMER1 ;
	#elif TIMER1_MODE == FAST_PWM_ICR1
		/* SET WAVE GENERATION MODE TO NORMAL MODE */
		CLR_BIT(TCCR1A,0);
 926:	af e4       	ldi	r26, 0x4F	; 79
 928:	b0 e0       	ldi	r27, 0x00	; 0
 92a:	ef e4       	ldi	r30, 0x4F	; 79
 92c:	f0 e0       	ldi	r31, 0x00	; 0
 92e:	80 81       	ld	r24, Z
 930:	8e 7f       	andi	r24, 0xFE	; 254
 932:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,1);
 934:	af e4       	ldi	r26, 0x4F	; 79
 936:	b0 e0       	ldi	r27, 0x00	; 0
 938:	ef e4       	ldi	r30, 0x4F	; 79
 93a:	f0 e0       	ldi	r31, 0x00	; 0
 93c:	80 81       	ld	r24, Z
 93e:	82 60       	ori	r24, 0x02	; 2
 940:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,3);
 942:	ae e4       	ldi	r26, 0x4E	; 78
 944:	b0 e0       	ldi	r27, 0x00	; 0
 946:	ee e4       	ldi	r30, 0x4E	; 78
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
 94c:	88 60       	ori	r24, 0x08	; 8
 94e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,4);
 950:	ae e4       	ldi	r26, 0x4E	; 78
 952:	b0 e0       	ldi	r27, 0x00	; 0
 954:	ee e4       	ldi	r30, 0x4E	; 78
 956:	f0 e0       	ldi	r31, 0x00	; 0
 958:	80 81       	ld	r24, Z
 95a:	80 61       	ori	r24, 0x10	; 16
 95c:	8c 93       	st	X, r24
		/* SET OC1A PIN ACTION */
		TCCR1A &= 0b10000011;
 95e:	af e4       	ldi	r26, 0x4F	; 79
 960:	b0 e0       	ldi	r27, 0x00	; 0
 962:	ef e4       	ldi	r30, 0x4F	; 79
 964:	f0 e0       	ldi	r31, 0x00	; 0
 966:	80 81       	ld	r24, Z
 968:	83 78       	andi	r24, 0x83	; 131
 96a:	8c 93       	st	X, r24
		TCCR1A |= (FAST_PWM_OC1A_PIN_ACTION << 6);
 96c:	af e4       	ldi	r26, 0x4F	; 79
 96e:	b0 e0       	ldi	r27, 0x00	; 0
 970:	ef e4       	ldi	r30, 0x4F	; 79
 972:	f0 e0       	ldi	r31, 0x00	; 0
 974:	80 81       	ld	r24, Z
 976:	80 68       	ori	r24, 0x80	; 128
 978:	8c 93       	st	X, r24
		/*SET OC1B PIN ACTION*/
		TCCR1A |= (FAST_PWM_OC1B_PIN_ACTION << 4);
 97a:	af e4       	ldi	r26, 0x4F	; 79
 97c:	b0 e0       	ldi	r27, 0x00	; 0
 97e:	ef e4       	ldi	r30, 0x4F	; 79
 980:	f0 e0       	ldi	r31, 0x00	; 0
 982:	80 81       	ld	r24, Z
 984:	80 63       	ori	r24, 0x30	; 48
 986:	8c 93       	st	X, r24
		/*ICR1 VALUE*/
		ICR1 = ICR1_VALUE;
 988:	e6 e4       	ldi	r30, 0x46	; 70
 98a:	f0 e0       	ldi	r31, 0x00	; 0
 98c:	8f e1       	ldi	r24, 0x1F	; 31
 98e:	9e e4       	ldi	r25, 0x4E	; 78
 990:	91 83       	std	Z+1, r25	; 0x01
 992:	80 83       	st	Z, r24
		/* SET CLK (PRESCALER) */
		TCCR1B &= 0b10011000;
 994:	ae e4       	ldi	r26, 0x4E	; 78
 996:	b0 e0       	ldi	r27, 0x00	; 0
 998:	ee e4       	ldi	r30, 0x4E	; 78
 99a:	f0 e0       	ldi	r31, 0x00	; 0
 99c:	80 81       	ld	r24, Z
 99e:	88 79       	andi	r24, 0x98	; 152
 9a0:	8c 93       	st	X, r24
		TCCR1B |= CLK_CONFIGURATION_TIMER1 ;
 9a2:	ae e4       	ldi	r26, 0x4E	; 78
 9a4:	b0 e0       	ldi	r27, 0x00	; 0
 9a6:	ee e4       	ldi	r30, 0x4E	; 78
 9a8:	f0 e0       	ldi	r31, 0x00	; 0
 9aa:	80 81       	ld	r24, Z
 9ac:	82 60       	ori	r24, 0x02	; 2
 9ae:	8c 93       	st	X, r24
	#endif
}
 9b0:	cf 91       	pop	r28
 9b2:	df 91       	pop	r29
 9b4:	08 95       	ret

000009b6 <MTIMER1_voidSetOCR1AValue>:
/*SET OCR0 VALUE ON REAL-TIME*/
void MTIMER1_voidSetOCR1AValue(u16 A_u16OCR1AValue)
{
 9b6:	df 93       	push	r29
 9b8:	cf 93       	push	r28
 9ba:	00 d0       	rcall	.+0      	; 0x9bc <MTIMER1_voidSetOCR1AValue+0x6>
 9bc:	cd b7       	in	r28, 0x3d	; 61
 9be:	de b7       	in	r29, 0x3e	; 62
 9c0:	9a 83       	std	Y+2, r25	; 0x02
 9c2:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = A_u16OCR1AValue;
 9c4:	ea e4       	ldi	r30, 0x4A	; 74
 9c6:	f0 e0       	ldi	r31, 0x00	; 0
 9c8:	89 81       	ldd	r24, Y+1	; 0x01
 9ca:	9a 81       	ldd	r25, Y+2	; 0x02
 9cc:	91 83       	std	Z+1, r25	; 0x01
 9ce:	80 83       	st	Z, r24
}
 9d0:	0f 90       	pop	r0
 9d2:	0f 90       	pop	r0
 9d4:	cf 91       	pop	r28
 9d6:	df 91       	pop	r29
 9d8:	08 95       	ret

000009da <MTIMER1_voidSetOCR1BValue>:
void MTIMER1_voidSetOCR1BValue(u16 A_u16OCR1BValue)
{
 9da:	df 93       	push	r29
 9dc:	cf 93       	push	r28
 9de:	00 d0       	rcall	.+0      	; 0x9e0 <MTIMER1_voidSetOCR1BValue+0x6>
 9e0:	cd b7       	in	r28, 0x3d	; 61
 9e2:	de b7       	in	r29, 0x3e	; 62
 9e4:	9a 83       	std	Y+2, r25	; 0x02
 9e6:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = A_u16OCR1BValue;
 9e8:	e8 e4       	ldi	r30, 0x48	; 72
 9ea:	f0 e0       	ldi	r31, 0x00	; 0
 9ec:	89 81       	ldd	r24, Y+1	; 0x01
 9ee:	9a 81       	ldd	r25, Y+2	; 0x02
 9f0:	91 83       	std	Z+1, r25	; 0x01
 9f2:	80 83       	st	Z, r24
}
 9f4:	0f 90       	pop	r0
 9f6:	0f 90       	pop	r0
 9f8:	cf 91       	pop	r28
 9fa:	df 91       	pop	r29
 9fc:	08 95       	ret

000009fe <MWDT_voidEnable>:
/* 					WATCH DOG TIMER					*/
/****************************************************/


void MWDT_voidEnable()
{
 9fe:	df 93       	push	r29
 a00:	cf 93       	push	r28
 a02:	cd b7       	in	r28, 0x3d	; 61
 a04:	de b7       	in	r29, 0x3e	; 62
	/*SET WDE BIT & CLEAR WDTOE BIT*/
	SET_BIT(WDTCR,WDE);
 a06:	a1 e4       	ldi	r26, 0x41	; 65
 a08:	b0 e0       	ldi	r27, 0x00	; 0
 a0a:	e1 e4       	ldi	r30, 0x41	; 65
 a0c:	f0 e0       	ldi	r31, 0x00	; 0
 a0e:	80 81       	ld	r24, Z
 a10:	88 60       	ori	r24, 0x08	; 8
 a12:	8c 93       	st	X, r24
	/*SET THE PRESCALER VALUE*/
	WDTCR |= WDT_PRESCALER_SLECT;
 a14:	a1 e4       	ldi	r26, 0x41	; 65
 a16:	b0 e0       	ldi	r27, 0x00	; 0
 a18:	e1 e4       	ldi	r30, 0x41	; 65
 a1a:	f0 e0       	ldi	r31, 0x00	; 0
 a1c:	80 81       	ld	r24, Z
 a1e:	87 60       	ori	r24, 0x07	; 7
 a20:	8c 93       	st	X, r24
}
 a22:	cf 91       	pop	r28
 a24:	df 91       	pop	r29
 a26:	08 95       	ret

00000a28 <MWDT_voidDisable>:
void MWDT_voidDisable()
{
 a28:	df 93       	push	r29
 a2a:	cf 93       	push	r28
 a2c:	cd b7       	in	r28, 0x3d	; 61
 a2e:	de b7       	in	r29, 0x3e	; 62
	/*SET WDE BIT & SET WDTOE BIT*/
	SET_BIT(WDTCR,WDE);
 a30:	a1 e4       	ldi	r26, 0x41	; 65
 a32:	b0 e0       	ldi	r27, 0x00	; 0
 a34:	e1 e4       	ldi	r30, 0x41	; 65
 a36:	f0 e0       	ldi	r31, 0x00	; 0
 a38:	80 81       	ld	r24, Z
 a3a:	88 60       	ori	r24, 0x08	; 8
 a3c:	8c 93       	st	X, r24
	SET_BIT(WDTCR,WDTOE);
 a3e:	a1 e4       	ldi	r26, 0x41	; 65
 a40:	b0 e0       	ldi	r27, 0x00	; 0
 a42:	e1 e4       	ldi	r30, 0x41	; 65
 a44:	f0 e0       	ldi	r31, 0x00	; 0
 a46:	80 81       	ld	r24, Z
 a48:	80 61       	ori	r24, 0x10	; 16
 a4a:	8c 93       	st	X, r24
	WDTCR = 0x00;
 a4c:	e1 e4       	ldi	r30, 0x41	; 65
 a4e:	f0 e0       	ldi	r31, 0x00	; 0
 a50:	10 82       	st	Z, r1

}
 a52:	cf 91       	pop	r28
 a54:	df 91       	pop	r29
 a56:	08 95       	ret

00000a58 <main>:
#define F_CPU 8000000UL
void Toggel_LED_OVF(void);
void Toggel_LED_CTC(void);

void main(void)
{
 a58:	df 93       	push	r29
 a5a:	cf 93       	push	r28
 a5c:	cd b7       	in	r28, 0x3d	; 61
 a5e:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidInit();
 a60:	0e 94 3e 00 	call	0x7c	; 0x7c <MDIO_voidInit>
	MGI_voidEnable();
 a64:	0e 94 8a 03 	call	0x714	; 0x714 <MGI_voidEnable>
	while(1)
	{
		MWDT_voidEnable();
 a68:	0e 94 ff 04 	call	0x9fe	; 0x9fe <MWDT_voidEnable>
		if(MDIO_u8GetPinValue(PORTA,PIN1) == PIN_LOW)
 a6c:	80 e0       	ldi	r24, 0x00	; 0
 a6e:	61 e0       	ldi	r22, 0x01	; 1
 a70:	0e 94 8e 02 	call	0x51c	; 0x51c <MDIO_u8GetPinValue>
 a74:	88 23       	and	r24, r24
 a76:	c1 f7       	brne	.-16     	; 0xa68 <main+0x10>
		{
			MWDT_voidDisable();
 a78:	0e 94 14 05 	call	0xa28	; 0xa28 <MWDT_voidDisable>
 a7c:	f5 cf       	rjmp	.-22     	; 0xa68 <main+0x10>

00000a7e <Toggel_LED_OVF>:
	}

}
/*NORMAL MODE TOGGEL EACH 1 SEC */
void Toggel_LED_OVF(void)
{
 a7e:	df 93       	push	r29
 a80:	cf 93       	push	r28
 a82:	cd b7       	in	r28, 0x3d	; 61
 a84:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16Counter = 0;
	static u8 local_u8Flag = 0;
	local_u16Counter++;
 a86:	80 91 65 00 	lds	r24, 0x0065
 a8a:	90 91 66 00 	lds	r25, 0x0066
 a8e:	01 96       	adiw	r24, 0x01	; 1
 a90:	90 93 66 00 	sts	0x0066, r25
 a94:	80 93 65 00 	sts	0x0065, r24
	if (local_u16Counter == 3907)
 a98:	80 91 65 00 	lds	r24, 0x0065
 a9c:	90 91 66 00 	lds	r25, 0x0066
 aa0:	2f e0       	ldi	r18, 0x0F	; 15
 aa2:	83 34       	cpi	r24, 0x43	; 67
 aa4:	92 07       	cpc	r25, r18
 aa6:	d9 f4       	brne	.+54     	; 0xade <Toggel_LED_OVF+0x60>
	{
		MTIMER0_voidSetPreloadValue(192);
 aa8:	80 ec       	ldi	r24, 0xC0	; 192
 aaa:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <MTIMER0_voidSetPreloadValue>
		local_u16Counter = 0;
 aae:	10 92 66 00 	sts	0x0066, r1
 ab2:	10 92 65 00 	sts	0x0065, r1
		if(local_u8Flag == 0)
 ab6:	80 91 64 00 	lds	r24, 0x0064
 aba:	88 23       	and	r24, r24
 abc:	49 f4       	brne	.+18     	; 0xad0 <Toggel_LED_OVF+0x52>
		{
			MDIO_voidSetPinValue(PORTA,PIN0,PIN_HIGH);
 abe:	80 e0       	ldi	r24, 0x00	; 0
 ac0:	60 e0       	ldi	r22, 0x00	; 0
 ac2:	41 e0       	ldi	r20, 0x01	; 1
 ac4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <MDIO_voidSetPinValue>
			local_u8Flag = 1;
 ac8:	81 e0       	ldi	r24, 0x01	; 1
 aca:	80 93 64 00 	sts	0x0064, r24
 ace:	07 c0       	rjmp	.+14     	; 0xade <Toggel_LED_OVF+0x60>
		}
		else
		{
			MDIO_voidSetPinValue(PORTA,PIN0,PIN_LOW);
 ad0:	80 e0       	ldi	r24, 0x00	; 0
 ad2:	60 e0       	ldi	r22, 0x00	; 0
 ad4:	40 e0       	ldi	r20, 0x00	; 0
 ad6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <MDIO_voidSetPinValue>
			local_u8Flag = 0;
 ada:	10 92 64 00 	sts	0x0064, r1
		}
	}
}
 ade:	cf 91       	pop	r28
 ae0:	df 91       	pop	r29
 ae2:	08 95       	ret

00000ae4 <Toggel_LED_CTC>:
/*CTC MODE TOGGEL EACH 1 SEC */
void Toggel_LED_CTC(void)
{
 ae4:	df 93       	push	r29
 ae6:	cf 93       	push	r28
 ae8:	cd b7       	in	r28, 0x3d	; 61
 aea:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16Counter = 0;
	static u8 local_u8Flag = 0;
	local_u16Counter++;
 aec:	80 91 68 00 	lds	r24, 0x0068
 af0:	90 91 69 00 	lds	r25, 0x0069
 af4:	01 96       	adiw	r24, 0x01	; 1
 af6:	90 93 69 00 	sts	0x0069, r25
 afa:	80 93 68 00 	sts	0x0068, r24
	if (local_u16Counter == 10000)
 afe:	80 91 68 00 	lds	r24, 0x0068
 b02:	90 91 69 00 	lds	r25, 0x0069
 b06:	27 e2       	ldi	r18, 0x27	; 39
 b08:	80 31       	cpi	r24, 0x10	; 16
 b0a:	92 07       	cpc	r25, r18
 b0c:	c1 f4       	brne	.+48     	; 0xb3e <Toggel_LED_CTC+0x5a>
	{
		local_u16Counter = 0;
 b0e:	10 92 69 00 	sts	0x0069, r1
 b12:	10 92 68 00 	sts	0x0068, r1
		if(local_u8Flag == 0)
 b16:	80 91 67 00 	lds	r24, 0x0067
 b1a:	88 23       	and	r24, r24
 b1c:	49 f4       	brne	.+18     	; 0xb30 <Toggel_LED_CTC+0x4c>
		{
			MDIO_voidSetPinValue(PORTA,PIN0,PIN_HIGH);
 b1e:	80 e0       	ldi	r24, 0x00	; 0
 b20:	60 e0       	ldi	r22, 0x00	; 0
 b22:	41 e0       	ldi	r20, 0x01	; 1
 b24:	0e 94 78 01 	call	0x2f0	; 0x2f0 <MDIO_voidSetPinValue>
			local_u8Flag = 1;
 b28:	81 e0       	ldi	r24, 0x01	; 1
 b2a:	80 93 67 00 	sts	0x0067, r24
 b2e:	07 c0       	rjmp	.+14     	; 0xb3e <Toggel_LED_CTC+0x5a>
		}
		else
		{
			MDIO_voidSetPinValue(PORTA,PIN0,PIN_LOW);
 b30:	80 e0       	ldi	r24, 0x00	; 0
 b32:	60 e0       	ldi	r22, 0x00	; 0
 b34:	40 e0       	ldi	r20, 0x00	; 0
 b36:	0e 94 78 01 	call	0x2f0	; 0x2f0 <MDIO_voidSetPinValue>
			local_u8Flag = 0;
 b3a:	10 92 67 00 	sts	0x0067, r1
		}
	}
}
 b3e:	cf 91       	pop	r28
 b40:	df 91       	pop	r29
 b42:	08 95       	ret

00000b44 <_exit>:
 b44:	f8 94       	cli

00000b46 <__stop_program>:
 b46:	ff cf       	rjmp	.-2      	; 0xb46 <__stop_program>
