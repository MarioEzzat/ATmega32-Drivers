
USART_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000d68  00000000  00000000  00000a14  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000098c  00000000  00000000  0000177c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 bb 04 	call	0x976	; 0x976 <main>
  64:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <MDIO_voidInit>:
#include"../include/MCAL/DIO/DIO_interface.h"
#include"../include/MCAL/DIO/DIO_private.h"
#include"../include/MCAL/DIO/DIO_configuration.h"

void MDIO_voidInit (void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DDRA_REG = CONC_BIT(PORTA_PIN7_DIRECTION, PORTA_PIN6_DIRECTION, PORTA_PIN5_DIRECTION, PORTA_PIN4_DIRECTION,
  74:	ea e3       	ldi	r30, 0x3A	; 58
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	80 83       	st	Z, r24
						PORTA_PIN3_DIRECTION, PORTA_PIN2_DIRECTION, PORTA_PIN1_DIRECTION, PORTA_PIN0_DIRECTION);

	DDRB_REG = CONC_BIT(PORTB_PIN7_DIRECTION, PORTB_PIN6_DIRECTION, PORTB_PIN5_DIRECTION, PORTB_PIN4_DIRECTION,
  7c:	e7 e3       	ldi	r30, 0x37	; 55
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	80 83       	st	Z, r24
						PORTB_PIN3_DIRECTION, PORTB_PIN2_DIRECTION, PORTB_PIN1_DIRECTION, PORTB_PIN0_DIRECTION);

	DDRC_REG = CONC_BIT(PORTC_PIN7_DIRECTION, PORTC_PIN6_DIRECTION, PORTC_PIN5_DIRECTION, PORTC_PIN4_DIRECTION,
  84:	e4 e3       	ldi	r30, 0x34	; 52
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	80 83       	st	Z, r24
						PORTC_PIN3_DIRECTION, PORTC_PIN2_DIRECTION, PORTC_PIN1_DIRECTION, PORTC_PIN0_DIRECTION);

	DDRD_REG = CONC_BIT(PORTD_PIN7_DIRECTION, PORTD_PIN6_DIRECTION, PORTD_PIN5_DIRECTION, PORTD_PIN4_DIRECTION,
  8c:	e1 e3       	ldi	r30, 0x31	; 49
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	8e ef       	ldi	r24, 0xFE	; 254
  92:	80 83       	st	Z, r24
						PORTD_PIN3_DIRECTION, PORTD_PIN2_DIRECTION, PORTD_PIN1_DIRECTION, PORTD_PIN0_DIRECTION);

	PORTA_REG = CONC_BIT(PORTA_PIN7_VALUE, PORTA_PIN6_VALUE, PORTA_PIN5_VALUE, PORTA_PIN4_VALUE,
  94:	eb e3       	ldi	r30, 0x3B	; 59
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	10 82       	st	Z, r1
						 PORTA_PIN3_VALUE, PORTA_PIN2_VALUE, PORTA_PIN1_VALUE, PORTA_PIN0_VALUE);

	PORTB_REG = CONC_BIT(PORTB_PIN7_VALUE, PORTB_PIN6_VALUE, PORTB_PIN5_VALUE, PORTB_PIN4_VALUE,
  9a:	e8 e3       	ldi	r30, 0x38	; 56
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	10 82       	st	Z, r1
						 PORTB_PIN3_VALUE, PORTB_PIN2_VALUE, PORTB_PIN1_VALUE, PORTB_PIN0_VALUE);

	PORTC_REG = CONC_BIT(PORTC_PIN7_VALUE, PORTC_PIN6_VALUE, PORTC_PIN5_VALUE, PORTC_PIN4_VALUE,
  a0:	e5 e3       	ldi	r30, 0x35	; 53
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	10 82       	st	Z, r1
		   				 PORTC_PIN3_VALUE, PORTC_PIN2_VALUE, PORTC_PIN1_VALUE, PORTC_PIN0_VALUE);

	PORTD_REG = CONC_BIT(PORTD_PIN7_VALUE, PORTD_PIN6_VALUE, PORTD_PIN5_VALUE, PORTD_PIN4_VALUE,
  a6:	e2 e3       	ldi	r30, 0x32	; 50
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
						 PORTD_PIN3_VALUE, PORTD_PIN2_VALUE, PORTD_PIN1_VALUE, PORTD_PIN0_VALUE);

}
  ac:	cf 91       	pop	r28
  ae:	df 91       	pop	r29
  b0:	08 95       	ret

000000b2 <MDIO_voidSetPinDirection>:
// PORT ID :- POTRTA - PORTB - PORTC - PORTD
// PIN ID :- PIN0 ... PIN7
// PIN DIRECTION:- PIN_INPUT - PIN_OUTPUT
void MDIO_voidSetPinDirection (u8 A_u8PortId, u8 A_u8PinId, u8 A_u8Direction)
{
  b2:	df 93       	push	r29
  b4:	cf 93       	push	r28
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	2d 97       	sbiw	r28, 0x0d	; 13
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	f8 94       	cli
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	cd bf       	out	0x3d, r28	; 61
  c6:	89 83       	std	Y+1, r24	; 0x01
  c8:	6a 83       	std	Y+2, r22	; 0x02
  ca:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8PortId)
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	28 2f       	mov	r18, r24
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	3d 87       	std	Y+13, r19	; 0x0d
  d4:	2c 87       	std	Y+12, r18	; 0x0c
  d6:	8c 85       	ldd	r24, Y+12	; 0x0c
  d8:	9d 85       	ldd	r25, Y+13	; 0x0d
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	91 05       	cpc	r25, r1
  de:	09 f4       	brne	.+2      	; 0xe2 <MDIO_voidSetPinDirection+0x30>
  e0:	4f c0       	rjmp	.+158    	; 0x180 <MDIO_voidSetPinDirection+0xce>
  e2:	2c 85       	ldd	r18, Y+12	; 0x0c
  e4:	3d 85       	ldd	r19, Y+13	; 0x0d
  e6:	22 30       	cpi	r18, 0x02	; 2
  e8:	31 05       	cpc	r19, r1
  ea:	2c f4       	brge	.+10     	; 0xf6 <MDIO_voidSetPinDirection+0x44>
  ec:	8c 85       	ldd	r24, Y+12	; 0x0c
  ee:	9d 85       	ldd	r25, Y+13	; 0x0d
  f0:	00 97       	sbiw	r24, 0x00	; 0
  f2:	71 f0       	breq	.+28     	; 0x110 <MDIO_voidSetPinDirection+0x5e>
  f4:	eb c0       	rjmp	.+470    	; 0x2cc <MDIO_voidSetPinDirection+0x21a>
  f6:	2c 85       	ldd	r18, Y+12	; 0x0c
  f8:	3d 85       	ldd	r19, Y+13	; 0x0d
  fa:	22 30       	cpi	r18, 0x02	; 2
  fc:	31 05       	cpc	r19, r1
  fe:	09 f4       	brne	.+2      	; 0x102 <MDIO_voidSetPinDirection+0x50>
 100:	77 c0       	rjmp	.+238    	; 0x1f0 <MDIO_voidSetPinDirection+0x13e>
 102:	8c 85       	ldd	r24, Y+12	; 0x0c
 104:	9d 85       	ldd	r25, Y+13	; 0x0d
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	91 05       	cpc	r25, r1
 10a:	09 f4       	brne	.+2      	; 0x10e <MDIO_voidSetPinDirection+0x5c>
 10c:	a9 c0       	rjmp	.+338    	; 0x260 <MDIO_voidSetPinDirection+0x1ae>
 10e:	de c0       	rjmp	.+444    	; 0x2cc <MDIO_voidSetPinDirection+0x21a>
	{
	case PORTA:
		switch(A_u8Direction)
 110:	8b 81       	ldd	r24, Y+3	; 0x03
 112:	28 2f       	mov	r18, r24
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	3b 87       	std	Y+11, r19	; 0x0b
 118:	2a 87       	std	Y+10, r18	; 0x0a
 11a:	8a 85       	ldd	r24, Y+10	; 0x0a
 11c:	9b 85       	ldd	r25, Y+11	; 0x0b
 11e:	00 97       	sbiw	r24, 0x00	; 0
 120:	d1 f0       	breq	.+52     	; 0x156 <MDIO_voidSetPinDirection+0xa4>
 122:	2a 85       	ldd	r18, Y+10	; 0x0a
 124:	3b 85       	ldd	r19, Y+11	; 0x0b
 126:	21 30       	cpi	r18, 0x01	; 1
 128:	31 05       	cpc	r19, r1
 12a:	09 f0       	breq	.+2      	; 0x12e <MDIO_voidSetPinDirection+0x7c>
 12c:	cf c0       	rjmp	.+414    	; 0x2cc <MDIO_voidSetPinDirection+0x21a>
		{
		case PIN_OUTPUT: SET_BIT(DDRA_REG,A_u8PinId);
 12e:	aa e3       	ldi	r26, 0x3A	; 58
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	ea e3       	ldi	r30, 0x3A	; 58
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	48 2f       	mov	r20, r24
 13a:	8a 81       	ldd	r24, Y+2	; 0x02
 13c:	28 2f       	mov	r18, r24
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 2e       	mov	r0, r18
 146:	02 c0       	rjmp	.+4      	; 0x14c <MDIO_voidSetPinDirection+0x9a>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <MDIO_voidSetPinDirection+0x96>
 150:	84 2b       	or	r24, r20
 152:	8c 93       	st	X, r24
 154:	bb c0       	rjmp	.+374    	; 0x2cc <MDIO_voidSetPinDirection+0x21a>
						 break;
		case PIN_INPUT : CLR_BIT(DDRA_REG,A_u8PinId);
 156:	aa e3       	ldi	r26, 0x3A	; 58
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	ea e3       	ldi	r30, 0x3A	; 58
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	48 2f       	mov	r20, r24
 162:	8a 81       	ldd	r24, Y+2	; 0x02
 164:	28 2f       	mov	r18, r24
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 2e       	mov	r0, r18
 16e:	02 c0       	rjmp	.+4      	; 0x174 <MDIO_voidSetPinDirection+0xc2>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	0a 94       	dec	r0
 176:	e2 f7       	brpl	.-8      	; 0x170 <MDIO_voidSetPinDirection+0xbe>
 178:	80 95       	com	r24
 17a:	84 23       	and	r24, r20
 17c:	8c 93       	st	X, r24
 17e:	a6 c0       	rjmp	.+332    	; 0x2cc <MDIO_voidSetPinDirection+0x21a>
		default:
				 break;
		}
		break;
	case PORTB:
		switch(A_u8Direction)
 180:	8b 81       	ldd	r24, Y+3	; 0x03
 182:	28 2f       	mov	r18, r24
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	39 87       	std	Y+9, r19	; 0x09
 188:	28 87       	std	Y+8, r18	; 0x08
 18a:	88 85       	ldd	r24, Y+8	; 0x08
 18c:	99 85       	ldd	r25, Y+9	; 0x09
 18e:	00 97       	sbiw	r24, 0x00	; 0
 190:	d1 f0       	breq	.+52     	; 0x1c6 <MDIO_voidSetPinDirection+0x114>
 192:	28 85       	ldd	r18, Y+8	; 0x08
 194:	39 85       	ldd	r19, Y+9	; 0x09
 196:	21 30       	cpi	r18, 0x01	; 1
 198:	31 05       	cpc	r19, r1
 19a:	09 f0       	breq	.+2      	; 0x19e <MDIO_voidSetPinDirection+0xec>
 19c:	97 c0       	rjmp	.+302    	; 0x2cc <MDIO_voidSetPinDirection+0x21a>
		{
		case PIN_OUTPUT: SET_BIT(DDRB_REG,A_u8PinId);
 19e:	a7 e3       	ldi	r26, 0x37	; 55
 1a0:	b0 e0       	ldi	r27, 0x00	; 0
 1a2:	e7 e3       	ldi	r30, 0x37	; 55
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	48 2f       	mov	r20, r24
 1aa:	8a 81       	ldd	r24, Y+2	; 0x02
 1ac:	28 2f       	mov	r18, r24
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 2e       	mov	r0, r18
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <MDIO_voidSetPinDirection+0x10a>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	0a 94       	dec	r0
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <MDIO_voidSetPinDirection+0x106>
 1c0:	84 2b       	or	r24, r20
 1c2:	8c 93       	st	X, r24
 1c4:	83 c0       	rjmp	.+262    	; 0x2cc <MDIO_voidSetPinDirection+0x21a>
						 break;
		case PIN_INPUT : CLR_BIT(DDRB_REG,A_u8PinId);
 1c6:	a7 e3       	ldi	r26, 0x37	; 55
 1c8:	b0 e0       	ldi	r27, 0x00	; 0
 1ca:	e7 e3       	ldi	r30, 0x37	; 55
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	48 2f       	mov	r20, r24
 1d2:	8a 81       	ldd	r24, Y+2	; 0x02
 1d4:	28 2f       	mov	r18, r24
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 2e       	mov	r0, r18
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <MDIO_voidSetPinDirection+0x132>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	0a 94       	dec	r0
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <MDIO_voidSetPinDirection+0x12e>
 1e8:	80 95       	com	r24
 1ea:	84 23       	and	r24, r20
 1ec:	8c 93       	st	X, r24
 1ee:	6e c0       	rjmp	.+220    	; 0x2cc <MDIO_voidSetPinDirection+0x21a>
		default:
				break;
		}
		break;
	case PORTC:
		switch(A_u8Direction)
 1f0:	8b 81       	ldd	r24, Y+3	; 0x03
 1f2:	28 2f       	mov	r18, r24
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	3f 83       	std	Y+7, r19	; 0x07
 1f8:	2e 83       	std	Y+6, r18	; 0x06
 1fa:	8e 81       	ldd	r24, Y+6	; 0x06
 1fc:	9f 81       	ldd	r25, Y+7	; 0x07
 1fe:	00 97       	sbiw	r24, 0x00	; 0
 200:	d1 f0       	breq	.+52     	; 0x236 <MDIO_voidSetPinDirection+0x184>
 202:	2e 81       	ldd	r18, Y+6	; 0x06
 204:	3f 81       	ldd	r19, Y+7	; 0x07
 206:	21 30       	cpi	r18, 0x01	; 1
 208:	31 05       	cpc	r19, r1
 20a:	09 f0       	breq	.+2      	; 0x20e <MDIO_voidSetPinDirection+0x15c>
 20c:	5f c0       	rjmp	.+190    	; 0x2cc <MDIO_voidSetPinDirection+0x21a>
		{
		case PIN_OUTPUT: SET_BIT(DDRC_REG,A_u8PinId);
 20e:	a4 e3       	ldi	r26, 0x34	; 52
 210:	b0 e0       	ldi	r27, 0x00	; 0
 212:	e4 e3       	ldi	r30, 0x34	; 52
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	48 2f       	mov	r20, r24
 21a:	8a 81       	ldd	r24, Y+2	; 0x02
 21c:	28 2f       	mov	r18, r24
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 2e       	mov	r0, r18
 226:	02 c0       	rjmp	.+4      	; 0x22c <MDIO_voidSetPinDirection+0x17a>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	0a 94       	dec	r0
 22e:	e2 f7       	brpl	.-8      	; 0x228 <MDIO_voidSetPinDirection+0x176>
 230:	84 2b       	or	r24, r20
 232:	8c 93       	st	X, r24
 234:	4b c0       	rjmp	.+150    	; 0x2cc <MDIO_voidSetPinDirection+0x21a>
						 break;
		case PIN_INPUT : CLR_BIT(DDRC_REG,A_u8PinId);
 236:	a4 e3       	ldi	r26, 0x34	; 52
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	e4 e3       	ldi	r30, 0x34	; 52
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	48 2f       	mov	r20, r24
 242:	8a 81       	ldd	r24, Y+2	; 0x02
 244:	28 2f       	mov	r18, r24
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 2e       	mov	r0, r18
 24e:	02 c0       	rjmp	.+4      	; 0x254 <MDIO_voidSetPinDirection+0x1a2>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	0a 94       	dec	r0
 256:	e2 f7       	brpl	.-8      	; 0x250 <MDIO_voidSetPinDirection+0x19e>
 258:	80 95       	com	r24
 25a:	84 23       	and	r24, r20
 25c:	8c 93       	st	X, r24
 25e:	36 c0       	rjmp	.+108    	; 0x2cc <MDIO_voidSetPinDirection+0x21a>
		default:
				break;
		}
		break;
	case PORTD:
		switch(A_u8Direction)
 260:	8b 81       	ldd	r24, Y+3	; 0x03
 262:	28 2f       	mov	r18, r24
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	3d 83       	std	Y+5, r19	; 0x05
 268:	2c 83       	std	Y+4, r18	; 0x04
 26a:	8c 81       	ldd	r24, Y+4	; 0x04
 26c:	9d 81       	ldd	r25, Y+5	; 0x05
 26e:	00 97       	sbiw	r24, 0x00	; 0
 270:	c9 f0       	breq	.+50     	; 0x2a4 <MDIO_voidSetPinDirection+0x1f2>
 272:	2c 81       	ldd	r18, Y+4	; 0x04
 274:	3d 81       	ldd	r19, Y+5	; 0x05
 276:	21 30       	cpi	r18, 0x01	; 1
 278:	31 05       	cpc	r19, r1
 27a:	41 f5       	brne	.+80     	; 0x2cc <MDIO_voidSetPinDirection+0x21a>
		{
		case PIN_OUTPUT: SET_BIT(DDRD_REG,A_u8PinId);
 27c:	a1 e3       	ldi	r26, 0x31	; 49
 27e:	b0 e0       	ldi	r27, 0x00	; 0
 280:	e1 e3       	ldi	r30, 0x31	; 49
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	48 2f       	mov	r20, r24
 288:	8a 81       	ldd	r24, Y+2	; 0x02
 28a:	28 2f       	mov	r18, r24
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 2e       	mov	r0, r18
 294:	02 c0       	rjmp	.+4      	; 0x29a <MDIO_voidSetPinDirection+0x1e8>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <MDIO_voidSetPinDirection+0x1e4>
 29e:	84 2b       	or	r24, r20
 2a0:	8c 93       	st	X, r24
 2a2:	14 c0       	rjmp	.+40     	; 0x2cc <MDIO_voidSetPinDirection+0x21a>
						 break;
		case PIN_INPUT : CLR_BIT(DDRD_REG,A_u8PinId);
 2a4:	a1 e3       	ldi	r26, 0x31	; 49
 2a6:	b0 e0       	ldi	r27, 0x00	; 0
 2a8:	e1 e3       	ldi	r30, 0x31	; 49
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	48 2f       	mov	r20, r24
 2b0:	8a 81       	ldd	r24, Y+2	; 0x02
 2b2:	28 2f       	mov	r18, r24
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 2e       	mov	r0, r18
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <MDIO_voidSetPinDirection+0x210>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	0a 94       	dec	r0
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <MDIO_voidSetPinDirection+0x20c>
 2c6:	80 95       	com	r24
 2c8:	84 23       	and	r24, r20
 2ca:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
 2cc:	2d 96       	adiw	r28, 0x0d	; 13
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	f8 94       	cli
 2d2:	de bf       	out	0x3e, r29	; 62
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	cd bf       	out	0x3d, r28	; 61
 2d8:	cf 91       	pop	r28
 2da:	df 91       	pop	r29
 2dc:	08 95       	ret

000002de <MDIO_voidSetPinValue>:
// PORT ID :- POTRTA - PORTB - PORTC - PORTD
// PIN ID :- PIN0 ... PIN7
// PIN VALUE:- PIN_LOW - PIN_HIGH
void MDIO_voidSetPinValue (u8 A_u8PortId, u8 A_u8PinId, u8 A_u8Value)
{
 2de:	df 93       	push	r29
 2e0:	cf 93       	push	r28
 2e2:	cd b7       	in	r28, 0x3d	; 61
 2e4:	de b7       	in	r29, 0x3e	; 62
 2e6:	2d 97       	sbiw	r28, 0x0d	; 13
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	f8 94       	cli
 2ec:	de bf       	out	0x3e, r29	; 62
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	cd bf       	out	0x3d, r28	; 61
 2f2:	89 83       	std	Y+1, r24	; 0x01
 2f4:	6a 83       	std	Y+2, r22	; 0x02
 2f6:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8PortId)
 2f8:	89 81       	ldd	r24, Y+1	; 0x01
 2fa:	28 2f       	mov	r18, r24
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	3d 87       	std	Y+13, r19	; 0x0d
 300:	2c 87       	std	Y+12, r18	; 0x0c
 302:	8c 85       	ldd	r24, Y+12	; 0x0c
 304:	9d 85       	ldd	r25, Y+13	; 0x0d
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	91 05       	cpc	r25, r1
 30a:	09 f4       	brne	.+2      	; 0x30e <MDIO_voidSetPinValue+0x30>
 30c:	4f c0       	rjmp	.+158    	; 0x3ac <MDIO_voidSetPinValue+0xce>
 30e:	2c 85       	ldd	r18, Y+12	; 0x0c
 310:	3d 85       	ldd	r19, Y+13	; 0x0d
 312:	22 30       	cpi	r18, 0x02	; 2
 314:	31 05       	cpc	r19, r1
 316:	2c f4       	brge	.+10     	; 0x322 <MDIO_voidSetPinValue+0x44>
 318:	8c 85       	ldd	r24, Y+12	; 0x0c
 31a:	9d 85       	ldd	r25, Y+13	; 0x0d
 31c:	00 97       	sbiw	r24, 0x00	; 0
 31e:	71 f0       	breq	.+28     	; 0x33c <MDIO_voidSetPinValue+0x5e>
 320:	eb c0       	rjmp	.+470    	; 0x4f8 <MDIO_voidSetPinValue+0x21a>
 322:	2c 85       	ldd	r18, Y+12	; 0x0c
 324:	3d 85       	ldd	r19, Y+13	; 0x0d
 326:	22 30       	cpi	r18, 0x02	; 2
 328:	31 05       	cpc	r19, r1
 32a:	09 f4       	brne	.+2      	; 0x32e <MDIO_voidSetPinValue+0x50>
 32c:	77 c0       	rjmp	.+238    	; 0x41c <MDIO_voidSetPinValue+0x13e>
 32e:	8c 85       	ldd	r24, Y+12	; 0x0c
 330:	9d 85       	ldd	r25, Y+13	; 0x0d
 332:	83 30       	cpi	r24, 0x03	; 3
 334:	91 05       	cpc	r25, r1
 336:	09 f4       	brne	.+2      	; 0x33a <MDIO_voidSetPinValue+0x5c>
 338:	a9 c0       	rjmp	.+338    	; 0x48c <MDIO_voidSetPinValue+0x1ae>
 33a:	de c0       	rjmp	.+444    	; 0x4f8 <MDIO_voidSetPinValue+0x21a>
		{
		case PORTA:
			switch(A_u8Value)
 33c:	8b 81       	ldd	r24, Y+3	; 0x03
 33e:	28 2f       	mov	r18, r24
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	3b 87       	std	Y+11, r19	; 0x0b
 344:	2a 87       	std	Y+10, r18	; 0x0a
 346:	8a 85       	ldd	r24, Y+10	; 0x0a
 348:	9b 85       	ldd	r25, Y+11	; 0x0b
 34a:	00 97       	sbiw	r24, 0x00	; 0
 34c:	d1 f0       	breq	.+52     	; 0x382 <MDIO_voidSetPinValue+0xa4>
 34e:	2a 85       	ldd	r18, Y+10	; 0x0a
 350:	3b 85       	ldd	r19, Y+11	; 0x0b
 352:	21 30       	cpi	r18, 0x01	; 1
 354:	31 05       	cpc	r19, r1
 356:	09 f0       	breq	.+2      	; 0x35a <MDIO_voidSetPinValue+0x7c>
 358:	cf c0       	rjmp	.+414    	; 0x4f8 <MDIO_voidSetPinValue+0x21a>
			{
			case PIN_HIGH: SET_BIT(PORTA_REG,A_u8PinId);
 35a:	ab e3       	ldi	r26, 0x3B	; 59
 35c:	b0 e0       	ldi	r27, 0x00	; 0
 35e:	eb e3       	ldi	r30, 0x3B	; 59
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	48 2f       	mov	r20, r24
 366:	8a 81       	ldd	r24, Y+2	; 0x02
 368:	28 2f       	mov	r18, r24
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 2e       	mov	r0, r18
 372:	02 c0       	rjmp	.+4      	; 0x378 <MDIO_voidSetPinValue+0x9a>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	0a 94       	dec	r0
 37a:	e2 f7       	brpl	.-8      	; 0x374 <MDIO_voidSetPinValue+0x96>
 37c:	84 2b       	or	r24, r20
 37e:	8c 93       	st	X, r24
 380:	bb c0       	rjmp	.+374    	; 0x4f8 <MDIO_voidSetPinValue+0x21a>
						   break;
			case PIN_LOW : CLR_BIT(PORTA_REG,A_u8PinId);
 382:	ab e3       	ldi	r26, 0x3B	; 59
 384:	b0 e0       	ldi	r27, 0x00	; 0
 386:	eb e3       	ldi	r30, 0x3B	; 59
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	48 2f       	mov	r20, r24
 38e:	8a 81       	ldd	r24, Y+2	; 0x02
 390:	28 2f       	mov	r18, r24
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	02 2e       	mov	r0, r18
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <MDIO_voidSetPinValue+0xc2>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	0a 94       	dec	r0
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <MDIO_voidSetPinValue+0xbe>
 3a4:	80 95       	com	r24
 3a6:	84 23       	and	r24, r20
 3a8:	8c 93       	st	X, r24
 3aa:	a6 c0       	rjmp	.+332    	; 0x4f8 <MDIO_voidSetPinValue+0x21a>
			default:
					 break;
			}
			break;
		case PORTB:
			switch(A_u8Value)
 3ac:	8b 81       	ldd	r24, Y+3	; 0x03
 3ae:	28 2f       	mov	r18, r24
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	39 87       	std	Y+9, r19	; 0x09
 3b4:	28 87       	std	Y+8, r18	; 0x08
 3b6:	88 85       	ldd	r24, Y+8	; 0x08
 3b8:	99 85       	ldd	r25, Y+9	; 0x09
 3ba:	00 97       	sbiw	r24, 0x00	; 0
 3bc:	d1 f0       	breq	.+52     	; 0x3f2 <MDIO_voidSetPinValue+0x114>
 3be:	28 85       	ldd	r18, Y+8	; 0x08
 3c0:	39 85       	ldd	r19, Y+9	; 0x09
 3c2:	21 30       	cpi	r18, 0x01	; 1
 3c4:	31 05       	cpc	r19, r1
 3c6:	09 f0       	breq	.+2      	; 0x3ca <MDIO_voidSetPinValue+0xec>
 3c8:	97 c0       	rjmp	.+302    	; 0x4f8 <MDIO_voidSetPinValue+0x21a>
			{
			case PIN_HIGH: SET_BIT(PORTB_REG,A_u8PinId);
 3ca:	a8 e3       	ldi	r26, 0x38	; 56
 3cc:	b0 e0       	ldi	r27, 0x00	; 0
 3ce:	e8 e3       	ldi	r30, 0x38	; 56
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	48 2f       	mov	r20, r24
 3d6:	8a 81       	ldd	r24, Y+2	; 0x02
 3d8:	28 2f       	mov	r18, r24
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	02 2e       	mov	r0, r18
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <MDIO_voidSetPinValue+0x10a>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	0a 94       	dec	r0
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <MDIO_voidSetPinValue+0x106>
 3ec:	84 2b       	or	r24, r20
 3ee:	8c 93       	st	X, r24
 3f0:	83 c0       	rjmp	.+262    	; 0x4f8 <MDIO_voidSetPinValue+0x21a>
					       break;
			case PIN_LOW : CLR_BIT(PORTB_REG,A_u8PinId);
 3f2:	a8 e3       	ldi	r26, 0x38	; 56
 3f4:	b0 e0       	ldi	r27, 0x00	; 0
 3f6:	e8 e3       	ldi	r30, 0x38	; 56
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	48 2f       	mov	r20, r24
 3fe:	8a 81       	ldd	r24, Y+2	; 0x02
 400:	28 2f       	mov	r18, r24
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	02 2e       	mov	r0, r18
 40a:	02 c0       	rjmp	.+4      	; 0x410 <MDIO_voidSetPinValue+0x132>
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	0a 94       	dec	r0
 412:	e2 f7       	brpl	.-8      	; 0x40c <MDIO_voidSetPinValue+0x12e>
 414:	80 95       	com	r24
 416:	84 23       	and	r24, r20
 418:	8c 93       	st	X, r24
 41a:	6e c0       	rjmp	.+220    	; 0x4f8 <MDIO_voidSetPinValue+0x21a>
			default:
					break;
			}
			break;
		case PORTC:
			switch(A_u8Value)
 41c:	8b 81       	ldd	r24, Y+3	; 0x03
 41e:	28 2f       	mov	r18, r24
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	3f 83       	std	Y+7, r19	; 0x07
 424:	2e 83       	std	Y+6, r18	; 0x06
 426:	8e 81       	ldd	r24, Y+6	; 0x06
 428:	9f 81       	ldd	r25, Y+7	; 0x07
 42a:	00 97       	sbiw	r24, 0x00	; 0
 42c:	d1 f0       	breq	.+52     	; 0x462 <MDIO_voidSetPinValue+0x184>
 42e:	2e 81       	ldd	r18, Y+6	; 0x06
 430:	3f 81       	ldd	r19, Y+7	; 0x07
 432:	21 30       	cpi	r18, 0x01	; 1
 434:	31 05       	cpc	r19, r1
 436:	09 f0       	breq	.+2      	; 0x43a <MDIO_voidSetPinValue+0x15c>
 438:	5f c0       	rjmp	.+190    	; 0x4f8 <MDIO_voidSetPinValue+0x21a>
			{
			case PIN_HIGH: SET_BIT(PORTC_REG,A_u8PinId);
 43a:	a5 e3       	ldi	r26, 0x35	; 53
 43c:	b0 e0       	ldi	r27, 0x00	; 0
 43e:	e5 e3       	ldi	r30, 0x35	; 53
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	80 81       	ld	r24, Z
 444:	48 2f       	mov	r20, r24
 446:	8a 81       	ldd	r24, Y+2	; 0x02
 448:	28 2f       	mov	r18, r24
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	02 2e       	mov	r0, r18
 452:	02 c0       	rjmp	.+4      	; 0x458 <MDIO_voidSetPinValue+0x17a>
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	0a 94       	dec	r0
 45a:	e2 f7       	brpl	.-8      	; 0x454 <MDIO_voidSetPinValue+0x176>
 45c:	84 2b       	or	r24, r20
 45e:	8c 93       	st	X, r24
 460:	4b c0       	rjmp	.+150    	; 0x4f8 <MDIO_voidSetPinValue+0x21a>
						   break;
			case PIN_LOW : CLR_BIT(PORTC_REG,A_u8PinId);
 462:	a5 e3       	ldi	r26, 0x35	; 53
 464:	b0 e0       	ldi	r27, 0x00	; 0
 466:	e5 e3       	ldi	r30, 0x35	; 53
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	80 81       	ld	r24, Z
 46c:	48 2f       	mov	r20, r24
 46e:	8a 81       	ldd	r24, Y+2	; 0x02
 470:	28 2f       	mov	r18, r24
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	02 2e       	mov	r0, r18
 47a:	02 c0       	rjmp	.+4      	; 0x480 <MDIO_voidSetPinValue+0x1a2>
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	0a 94       	dec	r0
 482:	e2 f7       	brpl	.-8      	; 0x47c <MDIO_voidSetPinValue+0x19e>
 484:	80 95       	com	r24
 486:	84 23       	and	r24, r20
 488:	8c 93       	st	X, r24
 48a:	36 c0       	rjmp	.+108    	; 0x4f8 <MDIO_voidSetPinValue+0x21a>
			default:
					break;
			}
			break;
		case PORTD:
			switch(A_u8Value)
 48c:	8b 81       	ldd	r24, Y+3	; 0x03
 48e:	28 2f       	mov	r18, r24
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	3d 83       	std	Y+5, r19	; 0x05
 494:	2c 83       	std	Y+4, r18	; 0x04
 496:	8c 81       	ldd	r24, Y+4	; 0x04
 498:	9d 81       	ldd	r25, Y+5	; 0x05
 49a:	00 97       	sbiw	r24, 0x00	; 0
 49c:	c9 f0       	breq	.+50     	; 0x4d0 <MDIO_voidSetPinValue+0x1f2>
 49e:	2c 81       	ldd	r18, Y+4	; 0x04
 4a0:	3d 81       	ldd	r19, Y+5	; 0x05
 4a2:	21 30       	cpi	r18, 0x01	; 1
 4a4:	31 05       	cpc	r19, r1
 4a6:	41 f5       	brne	.+80     	; 0x4f8 <MDIO_voidSetPinValue+0x21a>
			{
			case PIN_HIGH: SET_BIT(PORTD_REG,A_u8PinId);
 4a8:	a2 e3       	ldi	r26, 0x32	; 50
 4aa:	b0 e0       	ldi	r27, 0x00	; 0
 4ac:	e2 e3       	ldi	r30, 0x32	; 50
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	48 2f       	mov	r20, r24
 4b4:	8a 81       	ldd	r24, Y+2	; 0x02
 4b6:	28 2f       	mov	r18, r24
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	02 2e       	mov	r0, r18
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <MDIO_voidSetPinValue+0x1e8>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	0a 94       	dec	r0
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <MDIO_voidSetPinValue+0x1e4>
 4ca:	84 2b       	or	r24, r20
 4cc:	8c 93       	st	X, r24
 4ce:	14 c0       	rjmp	.+40     	; 0x4f8 <MDIO_voidSetPinValue+0x21a>
							 break;
			case PIN_LOW : CLR_BIT(PORTD_REG,A_u8PinId);
 4d0:	a2 e3       	ldi	r26, 0x32	; 50
 4d2:	b0 e0       	ldi	r27, 0x00	; 0
 4d4:	e2 e3       	ldi	r30, 0x32	; 50
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	80 81       	ld	r24, Z
 4da:	48 2f       	mov	r20, r24
 4dc:	8a 81       	ldd	r24, Y+2	; 0x02
 4de:	28 2f       	mov	r18, r24
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	02 2e       	mov	r0, r18
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <MDIO_voidSetPinValue+0x210>
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	0a 94       	dec	r0
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <MDIO_voidSetPinValue+0x20c>
 4f2:	80 95       	com	r24
 4f4:	84 23       	and	r24, r20
 4f6:	8c 93       	st	X, r24
		default:
			break;
		}


}
 4f8:	2d 96       	adiw	r28, 0x0d	; 13
 4fa:	0f b6       	in	r0, 0x3f	; 63
 4fc:	f8 94       	cli
 4fe:	de bf       	out	0x3e, r29	; 62
 500:	0f be       	out	0x3f, r0	; 63
 502:	cd bf       	out	0x3d, r28	; 61
 504:	cf 91       	pop	r28
 506:	df 91       	pop	r29
 508:	08 95       	ret

0000050a <MDIO_u8GetPinValue>:

// PORT ID :- POTRTA - PORTB - PORTC - PORTD
// PIN ID :- PIN0 ... PIN7
u8 MDIO_u8GetPinValue(u8 A_u8PortId, u8 A_u8PinId)
{
 50a:	df 93       	push	r29
 50c:	cf 93       	push	r28
 50e:	00 d0       	rcall	.+0      	; 0x510 <MDIO_u8GetPinValue+0x6>
 510:	00 d0       	rcall	.+0      	; 0x512 <MDIO_u8GetPinValue+0x8>
 512:	0f 92       	push	r0
 514:	cd b7       	in	r28, 0x3d	; 61
 516:	de b7       	in	r29, 0x3e	; 62
 518:	8a 83       	std	Y+2, r24	; 0x02
 51a:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8PinValue=0;
 51c:	19 82       	std	Y+1, r1	; 0x01
	switch(A_u8PortId)
 51e:	8a 81       	ldd	r24, Y+2	; 0x02
 520:	28 2f       	mov	r18, r24
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	3d 83       	std	Y+5, r19	; 0x05
 526:	2c 83       	std	Y+4, r18	; 0x04
 528:	4c 81       	ldd	r20, Y+4	; 0x04
 52a:	5d 81       	ldd	r21, Y+5	; 0x05
 52c:	41 30       	cpi	r20, 0x01	; 1
 52e:	51 05       	cpc	r21, r1
 530:	41 f1       	breq	.+80     	; 0x582 <MDIO_u8GetPinValue+0x78>
 532:	8c 81       	ldd	r24, Y+4	; 0x04
 534:	9d 81       	ldd	r25, Y+5	; 0x05
 536:	82 30       	cpi	r24, 0x02	; 2
 538:	91 05       	cpc	r25, r1
 53a:	34 f4       	brge	.+12     	; 0x548 <MDIO_u8GetPinValue+0x3e>
 53c:	2c 81       	ldd	r18, Y+4	; 0x04
 53e:	3d 81       	ldd	r19, Y+5	; 0x05
 540:	21 15       	cp	r18, r1
 542:	31 05       	cpc	r19, r1
 544:	61 f0       	breq	.+24     	; 0x55e <MDIO_u8GetPinValue+0x54>
 546:	52 c0       	rjmp	.+164    	; 0x5ec <MDIO_u8GetPinValue+0xe2>
 548:	4c 81       	ldd	r20, Y+4	; 0x04
 54a:	5d 81       	ldd	r21, Y+5	; 0x05
 54c:	42 30       	cpi	r20, 0x02	; 2
 54e:	51 05       	cpc	r21, r1
 550:	51 f1       	breq	.+84     	; 0x5a6 <MDIO_u8GetPinValue+0x9c>
 552:	8c 81       	ldd	r24, Y+4	; 0x04
 554:	9d 81       	ldd	r25, Y+5	; 0x05
 556:	83 30       	cpi	r24, 0x03	; 3
 558:	91 05       	cpc	r25, r1
 55a:	b9 f1       	breq	.+110    	; 0x5ca <MDIO_u8GetPinValue+0xc0>
 55c:	47 c0       	rjmp	.+142    	; 0x5ec <MDIO_u8GetPinValue+0xe2>
	{
	case PORTA: local_u8PinValue = GET_BIT(PINA_REG,A_u8PinId);
 55e:	e9 e3       	ldi	r30, 0x39	; 57
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	80 81       	ld	r24, Z
 564:	28 2f       	mov	r18, r24
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	8b 81       	ldd	r24, Y+3	; 0x03
 56a:	88 2f       	mov	r24, r24
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	a9 01       	movw	r20, r18
 570:	02 c0       	rjmp	.+4      	; 0x576 <MDIO_u8GetPinValue+0x6c>
 572:	55 95       	asr	r21
 574:	47 95       	ror	r20
 576:	8a 95       	dec	r24
 578:	e2 f7       	brpl	.-8      	; 0x572 <MDIO_u8GetPinValue+0x68>
 57a:	ca 01       	movw	r24, r20
 57c:	81 70       	andi	r24, 0x01	; 1
 57e:	89 83       	std	Y+1, r24	; 0x01
 580:	35 c0       	rjmp	.+106    	; 0x5ec <MDIO_u8GetPinValue+0xe2>
				break;
	case PORTB: local_u8PinValue = GET_BIT(PINB_REG,A_u8PinId);
 582:	e6 e3       	ldi	r30, 0x36	; 54
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	80 81       	ld	r24, Z
 588:	28 2f       	mov	r18, r24
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	8b 81       	ldd	r24, Y+3	; 0x03
 58e:	88 2f       	mov	r24, r24
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	a9 01       	movw	r20, r18
 594:	02 c0       	rjmp	.+4      	; 0x59a <MDIO_u8GetPinValue+0x90>
 596:	55 95       	asr	r21
 598:	47 95       	ror	r20
 59a:	8a 95       	dec	r24
 59c:	e2 f7       	brpl	.-8      	; 0x596 <MDIO_u8GetPinValue+0x8c>
 59e:	ca 01       	movw	r24, r20
 5a0:	81 70       	andi	r24, 0x01	; 1
 5a2:	89 83       	std	Y+1, r24	; 0x01
 5a4:	23 c0       	rjmp	.+70     	; 0x5ec <MDIO_u8GetPinValue+0xe2>
				break;
	case PORTC: local_u8PinValue = GET_BIT(PINC_REG,A_u8PinId);
 5a6:	e3 e3       	ldi	r30, 0x33	; 51
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	80 81       	ld	r24, Z
 5ac:	28 2f       	mov	r18, r24
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	8b 81       	ldd	r24, Y+3	; 0x03
 5b2:	88 2f       	mov	r24, r24
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	a9 01       	movw	r20, r18
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <MDIO_u8GetPinValue+0xb4>
 5ba:	55 95       	asr	r21
 5bc:	47 95       	ror	r20
 5be:	8a 95       	dec	r24
 5c0:	e2 f7       	brpl	.-8      	; 0x5ba <MDIO_u8GetPinValue+0xb0>
 5c2:	ca 01       	movw	r24, r20
 5c4:	81 70       	andi	r24, 0x01	; 1
 5c6:	89 83       	std	Y+1, r24	; 0x01
 5c8:	11 c0       	rjmp	.+34     	; 0x5ec <MDIO_u8GetPinValue+0xe2>
				break;
	case PORTD: local_u8PinValue = GET_BIT(PIND_REG,A_u8PinId);
 5ca:	e0 e3       	ldi	r30, 0x30	; 48
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	80 81       	ld	r24, Z
 5d0:	28 2f       	mov	r18, r24
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	8b 81       	ldd	r24, Y+3	; 0x03
 5d6:	88 2f       	mov	r24, r24
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	a9 01       	movw	r20, r18
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <MDIO_u8GetPinValue+0xd8>
 5de:	55 95       	asr	r21
 5e0:	47 95       	ror	r20
 5e2:	8a 95       	dec	r24
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <MDIO_u8GetPinValue+0xd4>
 5e6:	ca 01       	movw	r24, r20
 5e8:	81 70       	andi	r24, 0x01	; 1
 5ea:	89 83       	std	Y+1, r24	; 0x01
				break;
	default:	break;
	}
	return local_u8PinValue;
 5ec:	89 81       	ldd	r24, Y+1	; 0x01
}
 5ee:	0f 90       	pop	r0
 5f0:	0f 90       	pop	r0
 5f2:	0f 90       	pop	r0
 5f4:	0f 90       	pop	r0
 5f6:	0f 90       	pop	r0
 5f8:	cf 91       	pop	r28
 5fa:	df 91       	pop	r29
 5fc:	08 95       	ret

000005fe <MDIO_voidSetPortValue>:
// PORT ID :- POTRTA - PORTB - PORTC - PORTD
// PORT VALUE:- PIN_LOW - PIN_HIGH
void MDIO_voidSetPortValue(u8 A_u8PortId, u8 A_u8Value)
{
 5fe:	df 93       	push	r29
 600:	cf 93       	push	r28
 602:	00 d0       	rcall	.+0      	; 0x604 <MDIO_voidSetPortValue+0x6>
 604:	00 d0       	rcall	.+0      	; 0x606 <MDIO_voidSetPortValue+0x8>
 606:	cd b7       	in	r28, 0x3d	; 61
 608:	de b7       	in	r29, 0x3e	; 62
 60a:	89 83       	std	Y+1, r24	; 0x01
 60c:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortId)
 60e:	89 81       	ldd	r24, Y+1	; 0x01
 610:	28 2f       	mov	r18, r24
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	3c 83       	std	Y+4, r19	; 0x04
 616:	2b 83       	std	Y+3, r18	; 0x03
 618:	8b 81       	ldd	r24, Y+3	; 0x03
 61a:	9c 81       	ldd	r25, Y+4	; 0x04
 61c:	81 30       	cpi	r24, 0x01	; 1
 61e:	91 05       	cpc	r25, r1
 620:	d1 f0       	breq	.+52     	; 0x656 <MDIO_voidSetPortValue+0x58>
 622:	2b 81       	ldd	r18, Y+3	; 0x03
 624:	3c 81       	ldd	r19, Y+4	; 0x04
 626:	22 30       	cpi	r18, 0x02	; 2
 628:	31 05       	cpc	r19, r1
 62a:	2c f4       	brge	.+10     	; 0x636 <MDIO_voidSetPortValue+0x38>
 62c:	8b 81       	ldd	r24, Y+3	; 0x03
 62e:	9c 81       	ldd	r25, Y+4	; 0x04
 630:	00 97       	sbiw	r24, 0x00	; 0
 632:	61 f0       	breq	.+24     	; 0x64c <MDIO_voidSetPortValue+0x4e>
 634:	1e c0       	rjmp	.+60     	; 0x672 <MDIO_voidSetPortValue+0x74>
 636:	2b 81       	ldd	r18, Y+3	; 0x03
 638:	3c 81       	ldd	r19, Y+4	; 0x04
 63a:	22 30       	cpi	r18, 0x02	; 2
 63c:	31 05       	cpc	r19, r1
 63e:	81 f0       	breq	.+32     	; 0x660 <MDIO_voidSetPortValue+0x62>
 640:	8b 81       	ldd	r24, Y+3	; 0x03
 642:	9c 81       	ldd	r25, Y+4	; 0x04
 644:	83 30       	cpi	r24, 0x03	; 3
 646:	91 05       	cpc	r25, r1
 648:	81 f0       	breq	.+32     	; 0x66a <MDIO_voidSetPortValue+0x6c>
 64a:	13 c0       	rjmp	.+38     	; 0x672 <MDIO_voidSetPortValue+0x74>
		{
		case PORTA: PORTA_REG =A_u8Value;
 64c:	eb e3       	ldi	r30, 0x3B	; 59
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	8a 81       	ldd	r24, Y+2	; 0x02
 652:	80 83       	st	Z, r24
 654:	0e c0       	rjmp	.+28     	; 0x672 <MDIO_voidSetPortValue+0x74>
					break;
		case PORTB: PORTB_REG =A_u8Value;
 656:	e8 e3       	ldi	r30, 0x38	; 56
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	8a 81       	ldd	r24, Y+2	; 0x02
 65c:	80 83       	st	Z, r24
 65e:	09 c0       	rjmp	.+18     	; 0x672 <MDIO_voidSetPortValue+0x74>
					break;
		case PORTC: PORTC_REG =A_u8Value;
 660:	e5 e3       	ldi	r30, 0x35	; 53
 662:	f0 e0       	ldi	r31, 0x00	; 0
 664:	8a 81       	ldd	r24, Y+2	; 0x02
 666:	80 83       	st	Z, r24
 668:	04 c0       	rjmp	.+8      	; 0x672 <MDIO_voidSetPortValue+0x74>
					break;
		case PORTD: PORTD_REG =A_u8Value;
 66a:	e2 e3       	ldi	r30, 0x32	; 50
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	8a 81       	ldd	r24, Y+2	; 0x02
 670:	80 83       	st	Z, r24
					break;
		default:	break;
		}
}
 672:	0f 90       	pop	r0
 674:	0f 90       	pop	r0
 676:	0f 90       	pop	r0
 678:	0f 90       	pop	r0
 67a:	cf 91       	pop	r28
 67c:	df 91       	pop	r29
 67e:	08 95       	ret

00000680 <MDIO_voidSetPortDirection>:
// PORT ID :- POTRTA - PORTB - PORTC - PORTD
// PORT DIRECTION:- PIN_INPUT - PIN_OUTPUT
void MDIO_voidSetPortDirection(u8 A_u8PortId, u8 A_u8Direction)
{
 680:	df 93       	push	r29
 682:	cf 93       	push	r28
 684:	00 d0       	rcall	.+0      	; 0x686 <MDIO_voidSetPortDirection+0x6>
 686:	00 d0       	rcall	.+0      	; 0x688 <MDIO_voidSetPortDirection+0x8>
 688:	cd b7       	in	r28, 0x3d	; 61
 68a:	de b7       	in	r29, 0x3e	; 62
 68c:	89 83       	std	Y+1, r24	; 0x01
 68e:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortId)
 690:	89 81       	ldd	r24, Y+1	; 0x01
 692:	28 2f       	mov	r18, r24
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	3c 83       	std	Y+4, r19	; 0x04
 698:	2b 83       	std	Y+3, r18	; 0x03
 69a:	8b 81       	ldd	r24, Y+3	; 0x03
 69c:	9c 81       	ldd	r25, Y+4	; 0x04
 69e:	81 30       	cpi	r24, 0x01	; 1
 6a0:	91 05       	cpc	r25, r1
 6a2:	d1 f0       	breq	.+52     	; 0x6d8 <MDIO_voidSetPortDirection+0x58>
 6a4:	2b 81       	ldd	r18, Y+3	; 0x03
 6a6:	3c 81       	ldd	r19, Y+4	; 0x04
 6a8:	22 30       	cpi	r18, 0x02	; 2
 6aa:	31 05       	cpc	r19, r1
 6ac:	2c f4       	brge	.+10     	; 0x6b8 <MDIO_voidSetPortDirection+0x38>
 6ae:	8b 81       	ldd	r24, Y+3	; 0x03
 6b0:	9c 81       	ldd	r25, Y+4	; 0x04
 6b2:	00 97       	sbiw	r24, 0x00	; 0
 6b4:	61 f0       	breq	.+24     	; 0x6ce <MDIO_voidSetPortDirection+0x4e>
 6b6:	1e c0       	rjmp	.+60     	; 0x6f4 <MDIO_voidSetPortDirection+0x74>
 6b8:	2b 81       	ldd	r18, Y+3	; 0x03
 6ba:	3c 81       	ldd	r19, Y+4	; 0x04
 6bc:	22 30       	cpi	r18, 0x02	; 2
 6be:	31 05       	cpc	r19, r1
 6c0:	81 f0       	breq	.+32     	; 0x6e2 <MDIO_voidSetPortDirection+0x62>
 6c2:	8b 81       	ldd	r24, Y+3	; 0x03
 6c4:	9c 81       	ldd	r25, Y+4	; 0x04
 6c6:	83 30       	cpi	r24, 0x03	; 3
 6c8:	91 05       	cpc	r25, r1
 6ca:	81 f0       	breq	.+32     	; 0x6ec <MDIO_voidSetPortDirection+0x6c>
 6cc:	13 c0       	rjmp	.+38     	; 0x6f4 <MDIO_voidSetPortDirection+0x74>
		{
		case PORTA: DDRA_REG = A_u8Direction;
 6ce:	ea e3       	ldi	r30, 0x3A	; 58
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	8a 81       	ldd	r24, Y+2	; 0x02
 6d4:	80 83       	st	Z, r24
 6d6:	0e c0       	rjmp	.+28     	; 0x6f4 <MDIO_voidSetPortDirection+0x74>
					break;
		case PORTB: DDRB_REG = A_u8Direction;
 6d8:	e7 e3       	ldi	r30, 0x37	; 55
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	8a 81       	ldd	r24, Y+2	; 0x02
 6de:	80 83       	st	Z, r24
 6e0:	09 c0       	rjmp	.+18     	; 0x6f4 <MDIO_voidSetPortDirection+0x74>
					break;
		case PORTC: DDRC_REG = A_u8Direction;
 6e2:	e4 e3       	ldi	r30, 0x34	; 52
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	8a 81       	ldd	r24, Y+2	; 0x02
 6e8:	80 83       	st	Z, r24
 6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <MDIO_voidSetPortDirection+0x74>
					break;
		case PORTD: DDRD_REG = A_u8Direction;
 6ec:	e1 e3       	ldi	r30, 0x31	; 49
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	8a 81       	ldd	r24, Y+2	; 0x02
 6f2:	80 83       	st	Z, r24
					break;
		default:	break;
		}
}
 6f4:	0f 90       	pop	r0
 6f6:	0f 90       	pop	r0
 6f8:	0f 90       	pop	r0
 6fa:	0f 90       	pop	r0
 6fc:	cf 91       	pop	r28
 6fe:	df 91       	pop	r29
 700:	08 95       	ret

00000702 <MGI_voidEnable>:
#include "../include/MCAL/GI/GI_configuration.h"



void MGI_voidEnable(void)
{
 702:	df 93       	push	r29
 704:	cf 93       	push	r28
 706:	cd b7       	in	r28, 0x3d	; 61
 708:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
 70a:	af e5       	ldi	r26, 0x5F	; 95
 70c:	b0 e0       	ldi	r27, 0x00	; 0
 70e:	ef e5       	ldi	r30, 0x5F	; 95
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	80 81       	ld	r24, Z
 714:	80 68       	ori	r24, 0x80	; 128
 716:	8c 93       	st	X, r24
}
 718:	cf 91       	pop	r28
 71a:	df 91       	pop	r29
 71c:	08 95       	ret

0000071e <MGI_voidDisable>:
void MGI_voidDisable(void)
{
 71e:	df 93       	push	r29
 720:	cf 93       	push	r28
 722:	cd b7       	in	r28, 0x3d	; 61
 724:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
 726:	af e5       	ldi	r26, 0x5F	; 95
 728:	b0 e0       	ldi	r27, 0x00	; 0
 72a:	ef e5       	ldi	r30, 0x5F	; 95
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	80 81       	ld	r24, Z
 730:	8f 77       	andi	r24, 0x7F	; 127
 732:	8c 93       	st	X, r24
}
 734:	cf 91       	pop	r28
 736:	df 91       	pop	r29
 738:	08 95       	ret

0000073a <MUSART_voidInit>:
#include "../include/MCAL/USART/USART_private.h"
#include "../include/MCAL/USART/USART_configuration.h"
#define F_CPU 8000000UL

void MUSART_voidInit(void)
{
 73a:	df 93       	push	r29
 73c:	cf 93       	push	r28
 73e:	00 d0       	rcall	.+0      	; 0x740 <MUSART_voidInit+0x6>
 740:	cd b7       	in	r28, 0x3d	; 61
 742:	de b7       	in	r29, 0x3e	; 62
	/*UBRR*/
	u16 local_u16BoudRateValue = BOUDRATE_EQUATION;
 744:	83 e3       	ldi	r24, 0x33	; 51
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	9a 83       	std	Y+2, r25	; 0x02
 74a:	89 83       	std	Y+1, r24	; 0x01
	/*STORE THE LOW BYTE*/
	UBRRL = (u8)local_u16BoudRateValue;
 74c:	e9 e2       	ldi	r30, 0x29	; 41
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	89 81       	ldd	r24, Y+1	; 0x01
 752:	80 83       	st	Z, r24
	/*STORE THE HIGH BYTE*/
	UBRRH = (u8)((local_u16BoudRateValue)>>8);
 754:	e0 e4       	ldi	r30, 0x40	; 64
 756:	f0 e0       	ldi	r31, 0x00	; 0
 758:	89 81       	ldd	r24, Y+1	; 0x01
 75a:	9a 81       	ldd	r25, Y+2	; 0x02
 75c:	89 2f       	mov	r24, r25
 75e:	99 27       	eor	r25, r25
 760:	80 83       	st	Z, r24
	#if USART_DOUBLE_SPEED == DOUBLE_SPEED_ON
		SET_BIT(UCSRA,U2X);
	#else
		CLR_BIT(UCSRA,U2X);
 762:	ab e2       	ldi	r26, 0x2B	; 43
 764:	b0 e0       	ldi	r27, 0x00	; 0
 766:	eb e2       	ldi	r30, 0x2B	; 43
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	80 81       	ld	r24, Z
 76c:	8d 7f       	andi	r24, 0xFD	; 253
 76e:	8c 93       	st	X, r24
		#define UPM0_VALUE 1
	#endif

	/* UCSRB */
	/* (USART_RX_INTERRUPT, USART_RX_INTERRUPT, USART_DATA_REGISTER_INTERRUPT,ENABLE_RX,ENABLE_TX, UCSZ2_VALUE, 0, 0) */
	UCSRB = CONC_BIT(RXCIE, TXCIE, UDRIE, RXEN, TXEN, UCSZ2, DONOT_CARE, DONOT_CARE);
 770:	ea e2       	ldi	r30, 0x2A	; 42
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	88 e1       	ldi	r24, 0x18	; 24
 776:	80 83       	st	Z, r24
	/* UCSRC */
	/* (UCSZ2_VALUE, MODE_OF_OPERATION, UPM1_VALUE, UPM0_VALUE, STOP_BITS_MODE,UCSZ1_VALUE, UCSZ0_VALUE, 0) */
	UCSRC = CONC_BIT(URSEL, UMSEL, UPM1, UPM0, USBS, UCSZ1, UCSZ0, 0);
 778:	e0 e4       	ldi	r30, 0x40	; 64
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	86 e8       	ldi	r24, 0x86	; 134
 77e:	80 83       	st	Z, r24
}
 780:	0f 90       	pop	r0
 782:	0f 90       	pop	r0
 784:	cf 91       	pop	r28
 786:	df 91       	pop	r29
 788:	08 95       	ret

0000078a <MUSART_voidSendByteSynchNonBlocking>:

void MUSART_voidSendByteSynchNonBlocking(u8 A_u8Byte)
{
 78a:	df 93       	push	r29
 78c:	cf 93       	push	r28
 78e:	00 d0       	rcall	.+0      	; 0x790 <MUSART_voidSendByteSynchNonBlocking+0x6>
 790:	00 d0       	rcall	.+0      	; 0x792 <MUSART_voidSendByteSynchNonBlocking+0x8>
 792:	0f 92       	push	r0
 794:	cd b7       	in	r28, 0x3d	; 61
 796:	de b7       	in	r29, 0x3e	; 62
 798:	8d 83       	std	Y+5, r24	; 0x05
	u32 local_u32TimeOut = 0;
 79a:	19 82       	std	Y+1, r1	; 0x01
 79c:	1a 82       	std	Y+2, r1	; 0x02
 79e:	1b 82       	std	Y+3, r1	; 0x03
 7a0:	1c 82       	std	Y+4, r1	; 0x04
 7a2:	17 c0       	rjmp	.+46     	; 0x7d2 <MUSART_voidSendByteSynchNonBlocking+0x48>
	/* CHECK DATA INTERRUPT FLAG */
	while(GET_BIT(UCSRA,UDRE) == 0)
	{
		local_u32TimeOut++;
 7a4:	89 81       	ldd	r24, Y+1	; 0x01
 7a6:	9a 81       	ldd	r25, Y+2	; 0x02
 7a8:	ab 81       	ldd	r26, Y+3	; 0x03
 7aa:	bc 81       	ldd	r27, Y+4	; 0x04
 7ac:	01 96       	adiw	r24, 0x01	; 1
 7ae:	a1 1d       	adc	r26, r1
 7b0:	b1 1d       	adc	r27, r1
 7b2:	89 83       	std	Y+1, r24	; 0x01
 7b4:	9a 83       	std	Y+2, r25	; 0x02
 7b6:	ab 83       	std	Y+3, r26	; 0x03
 7b8:	bc 83       	std	Y+4, r27	; 0x04
		/* IF BLOCKS */
		if (local_u32TimeOut == TIME_OUT)
 7ba:	89 81       	ldd	r24, Y+1	; 0x01
 7bc:	9a 81       	ldd	r25, Y+2	; 0x02
 7be:	ab 81       	ldd	r26, Y+3	; 0x03
 7c0:	bc 81       	ldd	r27, Y+4	; 0x04
 7c2:	80 32       	cpi	r24, 0x20	; 32
 7c4:	21 ea       	ldi	r18, 0xA1	; 161
 7c6:	92 07       	cpc	r25, r18
 7c8:	27 e0       	ldi	r18, 0x07	; 7
 7ca:	a2 07       	cpc	r26, r18
 7cc:	20 e0       	ldi	r18, 0x00	; 0
 7ce:	b2 07       	cpc	r27, r18
 7d0:	61 f0       	breq	.+24     	; 0x7ea <MUSART_voidSendByteSynchNonBlocking+0x60>

void MUSART_voidSendByteSynchNonBlocking(u8 A_u8Byte)
{
	u32 local_u32TimeOut = 0;
	/* CHECK DATA INTERRUPT FLAG */
	while(GET_BIT(UCSRA,UDRE) == 0)
 7d2:	eb e2       	ldi	r30, 0x2B	; 43
 7d4:	f0 e0       	ldi	r31, 0x00	; 0
 7d6:	80 81       	ld	r24, Z
 7d8:	82 95       	swap	r24
 7da:	86 95       	lsr	r24
 7dc:	87 70       	andi	r24, 0x07	; 7
 7de:	88 2f       	mov	r24, r24
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	81 70       	andi	r24, 0x01	; 1
 7e4:	90 70       	andi	r25, 0x00	; 0
 7e6:	00 97       	sbiw	r24, 0x00	; 0
 7e8:	e9 f2       	breq	.-70     	; 0x7a4 <MUSART_voidSendByteSynchNonBlocking+0x1a>
		{
			break;
		}
	}
	/* IF NO BLOCKS */
	if (local_u32TimeOut != TIME_OUT)
 7ea:	89 81       	ldd	r24, Y+1	; 0x01
 7ec:	9a 81       	ldd	r25, Y+2	; 0x02
 7ee:	ab 81       	ldd	r26, Y+3	; 0x03
 7f0:	bc 81       	ldd	r27, Y+4	; 0x04
 7f2:	80 32       	cpi	r24, 0x20	; 32
 7f4:	21 ea       	ldi	r18, 0xA1	; 161
 7f6:	92 07       	cpc	r25, r18
 7f8:	27 e0       	ldi	r18, 0x07	; 7
 7fa:	a2 07       	cpc	r26, r18
 7fc:	20 e0       	ldi	r18, 0x00	; 0
 7fe:	b2 07       	cpc	r27, r18
 800:	99 f1       	breq	.+102    	; 0x868 <__stack+0x9>
	{
		local_u32TimeOut = 0 ;
 802:	19 82       	std	Y+1, r1	; 0x01
 804:	1a 82       	std	Y+2, r1	; 0x02
 806:	1b 82       	std	Y+3, r1	; 0x03
 808:	1c 82       	std	Y+4, r1	; 0x04
		/* SEND DATA */
		UDR = A_u8Byte;
 80a:	ec e2       	ldi	r30, 0x2C	; 44
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	8d 81       	ldd	r24, Y+5	; 0x05
 810:	80 83       	st	Z, r24
 812:	17 c0       	rjmp	.+46     	; 0x842 <MUSART_voidSendByteSynchNonBlocking+0xb8>
		/* CHECK DATA INTERRUPT FLAG */
		while(GET_BIT(UCSRA,UDRE) == 0)
			{
				local_u32TimeOut++;
 814:	89 81       	ldd	r24, Y+1	; 0x01
 816:	9a 81       	ldd	r25, Y+2	; 0x02
 818:	ab 81       	ldd	r26, Y+3	; 0x03
 81a:	bc 81       	ldd	r27, Y+4	; 0x04
 81c:	01 96       	adiw	r24, 0x01	; 1
 81e:	a1 1d       	adc	r26, r1
 820:	b1 1d       	adc	r27, r1
 822:	89 83       	std	Y+1, r24	; 0x01
 824:	9a 83       	std	Y+2, r25	; 0x02
 826:	ab 83       	std	Y+3, r26	; 0x03
 828:	bc 83       	std	Y+4, r27	; 0x04
				if (local_u32TimeOut == TIME_OUT)
 82a:	89 81       	ldd	r24, Y+1	; 0x01
 82c:	9a 81       	ldd	r25, Y+2	; 0x02
 82e:	ab 81       	ldd	r26, Y+3	; 0x03
 830:	bc 81       	ldd	r27, Y+4	; 0x04
 832:	80 32       	cpi	r24, 0x20	; 32
 834:	21 ea       	ldi	r18, 0xA1	; 161
 836:	92 07       	cpc	r25, r18
 838:	27 e0       	ldi	r18, 0x07	; 7
 83a:	a2 07       	cpc	r26, r18
 83c:	20 e0       	ldi	r18, 0x00	; 0
 83e:	b2 07       	cpc	r27, r18
 840:	61 f0       	breq	.+24     	; 0x85a <MUSART_voidSendByteSynchNonBlocking+0xd0>
	{
		local_u32TimeOut = 0 ;
		/* SEND DATA */
		UDR = A_u8Byte;
		/* CHECK DATA INTERRUPT FLAG */
		while(GET_BIT(UCSRA,UDRE) == 0)
 842:	eb e2       	ldi	r30, 0x2B	; 43
 844:	f0 e0       	ldi	r31, 0x00	; 0
 846:	80 81       	ld	r24, Z
 848:	82 95       	swap	r24
 84a:	86 95       	lsr	r24
 84c:	87 70       	andi	r24, 0x07	; 7
 84e:	88 2f       	mov	r24, r24
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	81 70       	andi	r24, 0x01	; 1
 854:	90 70       	andi	r25, 0x00	; 0
 856:	00 97       	sbiw	r24, 0x00	; 0
 858:	e9 f2       	breq	.-70     	; 0x814 <MUSART_voidSendByteSynchNonBlocking+0x8a>
				{
					break ;
				}
			}
		/* CLEAR TRANSMIT FLAG */
		SET_BIT(UCSRA,TXC);
 85a:	ab e2       	ldi	r26, 0x2B	; 43
 85c:	b0 e0       	ldi	r27, 0x00	; 0
 85e:	eb e2       	ldi	r30, 0x2B	; 43
 860:	f0 e0       	ldi	r31, 0x00	; 0
 862:	80 81       	ld	r24, Z
 864:	80 64       	ori	r24, 0x40	; 64
 866:	8c 93       	st	X, r24
	}
}
 868:	0f 90       	pop	r0
 86a:	0f 90       	pop	r0
 86c:	0f 90       	pop	r0
 86e:	0f 90       	pop	r0
 870:	0f 90       	pop	r0
 872:	cf 91       	pop	r28
 874:	df 91       	pop	r29
 876:	08 95       	ret

00000878 <MUSART_voidSendByteSynchBlocking>:

void MUSART_voidSendByteSynchBlocking(u8 A_u8Byte)
{
 878:	df 93       	push	r29
 87a:	cf 93       	push	r28
 87c:	0f 92       	push	r0
 87e:	cd b7       	in	r28, 0x3d	; 61
 880:	de b7       	in	r29, 0x3e	; 62
 882:	89 83       	std	Y+1, r24	; 0x01
	/* CHECK DATA INTERRUPT FLAG */
	while(GET_BIT(UCSRA,UDRE) == 0){};
 884:	eb e2       	ldi	r30, 0x2B	; 43
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	80 81       	ld	r24, Z
 88a:	82 95       	swap	r24
 88c:	86 95       	lsr	r24
 88e:	87 70       	andi	r24, 0x07	; 7
 890:	88 2f       	mov	r24, r24
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	81 70       	andi	r24, 0x01	; 1
 896:	90 70       	andi	r25, 0x00	; 0
 898:	00 97       	sbiw	r24, 0x00	; 0
 89a:	a1 f3       	breq	.-24     	; 0x884 <MUSART_voidSendByteSynchBlocking+0xc>
	/* SEND DATA */
	UDR = A_u8Byte;
 89c:	ec e2       	ldi	r30, 0x2C	; 44
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	89 81       	ldd	r24, Y+1	; 0x01
 8a2:	80 83       	st	Z, r24
	/* CHECK DATA INTERRUPT FLAG */
	while(GET_BIT(UCSRA,UDRE) == 0){};
 8a4:	eb e2       	ldi	r30, 0x2B	; 43
 8a6:	f0 e0       	ldi	r31, 0x00	; 0
 8a8:	80 81       	ld	r24, Z
 8aa:	82 95       	swap	r24
 8ac:	86 95       	lsr	r24
 8ae:	87 70       	andi	r24, 0x07	; 7
 8b0:	88 2f       	mov	r24, r24
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	81 70       	andi	r24, 0x01	; 1
 8b6:	90 70       	andi	r25, 0x00	; 0
 8b8:	00 97       	sbiw	r24, 0x00	; 0
 8ba:	a1 f3       	breq	.-24     	; 0x8a4 <MUSART_voidSendByteSynchBlocking+0x2c>
	/* CLEAR TRANSMIT FLAG */
	SET_BIT(UCSRA,TXC);
 8bc:	ab e2       	ldi	r26, 0x2B	; 43
 8be:	b0 e0       	ldi	r27, 0x00	; 0
 8c0:	eb e2       	ldi	r30, 0x2B	; 43
 8c2:	f0 e0       	ldi	r31, 0x00	; 0
 8c4:	80 81       	ld	r24, Z
 8c6:	80 64       	ori	r24, 0x40	; 64
 8c8:	8c 93       	st	X, r24
}
 8ca:	0f 90       	pop	r0
 8cc:	cf 91       	pop	r28
 8ce:	df 91       	pop	r29
 8d0:	08 95       	ret

000008d2 <MUSART_voidReadByteSynchNonBlocking>:

u8 MUSART_voidReadByteSynchNonBlocking(void)
{
 8d2:	df 93       	push	r29
 8d4:	cf 93       	push	r28
 8d6:	00 d0       	rcall	.+0      	; 0x8d8 <MUSART_voidReadByteSynchNonBlocking+0x6>
 8d8:	00 d0       	rcall	.+0      	; 0x8da <MUSART_voidReadByteSynchNonBlocking+0x8>
 8da:	0f 92       	push	r0
 8dc:	cd b7       	in	r28, 0x3d	; 61
 8de:	de b7       	in	r29, 0x3e	; 62
	u32 local_u32TimeOut = 0;
 8e0:	1a 82       	std	Y+2, r1	; 0x02
 8e2:	1b 82       	std	Y+3, r1	; 0x03
 8e4:	1c 82       	std	Y+4, r1	; 0x04
 8e6:	1d 82       	std	Y+5, r1	; 0x05
	u8 local_u8Value = 255;
 8e8:	8f ef       	ldi	r24, 0xFF	; 255
 8ea:	89 83       	std	Y+1, r24	; 0x01
 8ec:	17 c0       	rjmp	.+46     	; 0x91c <MUSART_voidReadByteSynchNonBlocking+0x4a>
	while(GET_BIT(UCSRA,RXC) == 0)
	{
		local_u32TimeOut = local_u32TimeOut + 1;
 8ee:	8a 81       	ldd	r24, Y+2	; 0x02
 8f0:	9b 81       	ldd	r25, Y+3	; 0x03
 8f2:	ac 81       	ldd	r26, Y+4	; 0x04
 8f4:	bd 81       	ldd	r27, Y+5	; 0x05
 8f6:	01 96       	adiw	r24, 0x01	; 1
 8f8:	a1 1d       	adc	r26, r1
 8fa:	b1 1d       	adc	r27, r1
 8fc:	8a 83       	std	Y+2, r24	; 0x02
 8fe:	9b 83       	std	Y+3, r25	; 0x03
 900:	ac 83       	std	Y+4, r26	; 0x04
 902:	bd 83       	std	Y+5, r27	; 0x05
		if (local_u32TimeOut == TIME_OUT)
 904:	8a 81       	ldd	r24, Y+2	; 0x02
 906:	9b 81       	ldd	r25, Y+3	; 0x03
 908:	ac 81       	ldd	r26, Y+4	; 0x04
 90a:	bd 81       	ldd	r27, Y+5	; 0x05
 90c:	80 32       	cpi	r24, 0x20	; 32
 90e:	21 ea       	ldi	r18, 0xA1	; 161
 910:	92 07       	cpc	r25, r18
 912:	27 e0       	ldi	r18, 0x07	; 7
 914:	a2 07       	cpc	r26, r18
 916:	20 e0       	ldi	r18, 0x00	; 0
 918:	b2 07       	cpc	r27, r18
 91a:	29 f0       	breq	.+10     	; 0x926 <MUSART_voidReadByteSynchNonBlocking+0x54>

u8 MUSART_voidReadByteSynchNonBlocking(void)
{
	u32 local_u32TimeOut = 0;
	u8 local_u8Value = 255;
	while(GET_BIT(UCSRA,RXC) == 0)
 91c:	eb e2       	ldi	r30, 0x2B	; 43
 91e:	f0 e0       	ldi	r31, 0x00	; 0
 920:	80 81       	ld	r24, Z
 922:	88 23       	and	r24, r24
 924:	24 f7       	brge	.-56     	; 0x8ee <MUSART_voidReadByteSynchNonBlocking+0x1c>
		if (local_u32TimeOut == TIME_OUT)
		{
			break;
		}
	}
	if (local_u32TimeOut != TIME_OUT)
 926:	8a 81       	ldd	r24, Y+2	; 0x02
 928:	9b 81       	ldd	r25, Y+3	; 0x03
 92a:	ac 81       	ldd	r26, Y+4	; 0x04
 92c:	bd 81       	ldd	r27, Y+5	; 0x05
 92e:	80 32       	cpi	r24, 0x20	; 32
 930:	21 ea       	ldi	r18, 0xA1	; 161
 932:	92 07       	cpc	r25, r18
 934:	27 e0       	ldi	r18, 0x07	; 7
 936:	a2 07       	cpc	r26, r18
 938:	20 e0       	ldi	r18, 0x00	; 0
 93a:	b2 07       	cpc	r27, r18
 93c:	21 f0       	breq	.+8      	; 0x946 <MUSART_voidReadByteSynchNonBlocking+0x74>
	{
		local_u8Value = UDR;
 93e:	ec e2       	ldi	r30, 0x2C	; 44
 940:	f0 e0       	ldi	r31, 0x00	; 0
 942:	80 81       	ld	r24, Z
 944:	89 83       	std	Y+1, r24	; 0x01

	}
	return local_u8Value;
 946:	89 81       	ldd	r24, Y+1	; 0x01
}
 948:	0f 90       	pop	r0
 94a:	0f 90       	pop	r0
 94c:	0f 90       	pop	r0
 94e:	0f 90       	pop	r0
 950:	0f 90       	pop	r0
 952:	cf 91       	pop	r28
 954:	df 91       	pop	r29
 956:	08 95       	ret

00000958 <MUSART_voidReadByteSynchBlocking>:

u8 MUSART_voidReadByteSynchBlocking(void)
{
 958:	df 93       	push	r29
 95a:	cf 93       	push	r28
 95c:	cd b7       	in	r28, 0x3d	; 61
 95e:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,RXC) == 0);
 960:	eb e2       	ldi	r30, 0x2B	; 43
 962:	f0 e0       	ldi	r31, 0x00	; 0
 964:	80 81       	ld	r24, Z
 966:	88 23       	and	r24, r24
 968:	dc f7       	brge	.-10     	; 0x960 <MUSART_voidReadByteSynchBlocking+0x8>
	return UDR;
 96a:	ec e2       	ldi	r30, 0x2C	; 44
 96c:	f0 e0       	ldi	r31, 0x00	; 0
 96e:	80 81       	ld	r24, Z
}
 970:	cf 91       	pop	r28
 972:	df 91       	pop	r29
 974:	08 95       	ret

00000976 <main>:

#define F_CPU 8000000UL


void main(void)
{
 976:	df 93       	push	r29
 978:	cf 93       	push	r28
 97a:	0f 92       	push	r0
 97c:	cd b7       	in	r28, 0x3d	; 61
 97e:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidInit();
 980:	0e 94 36 00 	call	0x6c	; 0x6c <MDIO_voidInit>
	MUSART_voidInit();
 984:	0e 94 9d 03 	call	0x73a	; 0x73a <MUSART_voidInit>
	u8 local_u8Value = 1;
 988:	81 e0       	ldi	r24, 0x01	; 1
 98a:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		MUSART_voidSendByteSynchBlocking('M');
 98c:	8d e4       	ldi	r24, 0x4D	; 77
 98e:	0e 94 3c 04 	call	0x878	; 0x878 <MUSART_voidSendByteSynchBlocking>
		local_u8Value = MUSART_voidReadByteSynchNonBlocking();
 992:	0e 94 69 04 	call	0x8d2	; 0x8d2 <MUSART_voidReadByteSynchNonBlocking>
 996:	89 83       	std	Y+1, r24	; 0x01
		if(local_u8Value == 'a')
 998:	89 81       	ldd	r24, Y+1	; 0x01
 99a:	81 36       	cpi	r24, 0x61	; 97
 99c:	31 f4       	brne	.+12     	; 0x9aa <main+0x34>
		{
			MDIO_voidSetPinValue(PORTA,PIN0,PIN_HIGH);
 99e:	80 e0       	ldi	r24, 0x00	; 0
 9a0:	60 e0       	ldi	r22, 0x00	; 0
 9a2:	41 e0       	ldi	r20, 0x01	; 1
 9a4:	0e 94 6f 01 	call	0x2de	; 0x2de <MDIO_voidSetPinValue>
 9a8:	f1 cf       	rjmp	.-30     	; 0x98c <main+0x16>
		}
		else if(local_u8Value == 'b')
 9aa:	89 81       	ldd	r24, Y+1	; 0x01
 9ac:	82 36       	cpi	r24, 0x62	; 98
 9ae:	71 f7       	brne	.-36     	; 0x98c <main+0x16>
		{
			MDIO_voidSetPinValue(PORTA,PIN0,PIN_LOW);
 9b0:	80 e0       	ldi	r24, 0x00	; 0
 9b2:	60 e0       	ldi	r22, 0x00	; 0
 9b4:	40 e0       	ldi	r20, 0x00	; 0
 9b6:	0e 94 6f 01 	call	0x2de	; 0x2de <MDIO_voidSetPinValue>
 9ba:	e8 cf       	rjmp	.-48     	; 0x98c <main+0x16>

000009bc <_exit>:
 9bc:	f8 94       	cli

000009be <__stop_program>:
 9be:	ff cf       	rjmp	.-2      	; 0x9be <__stop_program>
